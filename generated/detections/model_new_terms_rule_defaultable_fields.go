/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
)

// checks if the NewTermsRuleDefaultableFields type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewTermsRuleDefaultableFields{}

// NewTermsRuleDefaultableFields struct for NewTermsRuleDefaultableFields
type NewTermsRuleDefaultableFields struct {
	Language *KqlQueryLanguage `json:"language,omitempty"`
}

// NewNewTermsRuleDefaultableFields instantiates a new NewTermsRuleDefaultableFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewTermsRuleDefaultableFields() *NewTermsRuleDefaultableFields {
	this := NewTermsRuleDefaultableFields{}
	return &this
}

// NewNewTermsRuleDefaultableFieldsWithDefaults instantiates a new NewTermsRuleDefaultableFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewTermsRuleDefaultableFieldsWithDefaults() *NewTermsRuleDefaultableFields {
	this := NewTermsRuleDefaultableFields{}
	return &this
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *NewTermsRuleDefaultableFields) GetLanguage() KqlQueryLanguage {
	if o == nil || IsNil(o.Language) {
		var ret KqlQueryLanguage
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewTermsRuleDefaultableFields) GetLanguageOk() (*KqlQueryLanguage, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *NewTermsRuleDefaultableFields) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given KqlQueryLanguage and assigns it to the Language field.
func (o *NewTermsRuleDefaultableFields) SetLanguage(v KqlQueryLanguage) {
	o.Language = &v
}

func (o NewTermsRuleDefaultableFields) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewTermsRuleDefaultableFields) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	return toSerialize, nil
}

type NullableNewTermsRuleDefaultableFields struct {
	value *NewTermsRuleDefaultableFields
	isSet bool
}

func (v NullableNewTermsRuleDefaultableFields) Get() *NewTermsRuleDefaultableFields {
	return v.value
}

func (v *NullableNewTermsRuleDefaultableFields) Set(val *NewTermsRuleDefaultableFields) {
	v.value = val
	v.isSet = true
}

func (v NullableNewTermsRuleDefaultableFields) IsSet() bool {
	return v.isSet
}

func (v *NullableNewTermsRuleDefaultableFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewTermsRuleDefaultableFields(val *NewTermsRuleDefaultableFields) *NullableNewTermsRuleDefaultableFields {
	return &NullableNewTermsRuleDefaultableFields{value: val, isSet: true}
}

func (v NullableNewTermsRuleDefaultableFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewTermsRuleDefaultableFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
