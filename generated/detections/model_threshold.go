/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
)

// checks if the Threshold type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Threshold{}

// Threshold struct for Threshold
type Threshold struct {
	Cardinality []ThresholdCardinalityInner `json:"cardinality,omitempty"`
	Field       ThresholdField              `json:"field"`
	// Threshold value
	Value int32 `json:"value"`
}

// NewThreshold instantiates a new Threshold object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreshold(field ThresholdField, value int32) *Threshold {
	this := Threshold{}
	this.Field = field
	this.Value = value
	return &this
}

// NewThresholdWithDefaults instantiates a new Threshold object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThresholdWithDefaults() *Threshold {
	this := Threshold{}
	return &this
}

// GetCardinality returns the Cardinality field value if set, zero value otherwise.
func (o *Threshold) GetCardinality() []ThresholdCardinalityInner {
	if o == nil || IsNil(o.Cardinality) {
		var ret []ThresholdCardinalityInner
		return ret
	}
	return o.Cardinality
}

// GetCardinalityOk returns a tuple with the Cardinality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Threshold) GetCardinalityOk() ([]ThresholdCardinalityInner, bool) {
	if o == nil || IsNil(o.Cardinality) {
		return nil, false
	}
	return o.Cardinality, true
}

// HasCardinality returns a boolean if a field has been set.
func (o *Threshold) HasCardinality() bool {
	if o != nil && !IsNil(o.Cardinality) {
		return true
	}

	return false
}

// SetCardinality gets a reference to the given []ThresholdCardinalityInner and assigns it to the Cardinality field.
func (o *Threshold) SetCardinality(v []ThresholdCardinalityInner) {
	o.Cardinality = v
}

// GetField returns the Field field value
func (o *Threshold) GetField() ThresholdField {
	if o == nil {
		var ret ThresholdField
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *Threshold) GetFieldOk() (*ThresholdField, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *Threshold) SetField(v ThresholdField) {
	o.Field = v
}

// GetValue returns the Value field value
func (o *Threshold) GetValue() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Threshold) GetValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Threshold) SetValue(v int32) {
	o.Value = v
}

func (o Threshold) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Threshold) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cardinality) {
		toSerialize["cardinality"] = o.Cardinality
	}
	toSerialize["field"] = o.Field
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableThreshold struct {
	value *Threshold
	isSet bool
}

func (v NullableThreshold) Get() *Threshold {
	return v.value
}

func (v *NullableThreshold) Set(val *Threshold) {
	v.value = val
	v.isSet = true
}

func (v NullableThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreshold(val *Threshold) *NullableThreshold {
	return &NullableThreshold{value: val, isSet: true}
}

func (v NullableThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
