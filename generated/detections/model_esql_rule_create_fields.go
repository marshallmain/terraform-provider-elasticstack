/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
)

// checks if the EsqlRuleCreateFields type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EsqlRuleCreateFields{}

// EsqlRuleCreateFields struct for EsqlRuleCreateFields
type EsqlRuleCreateFields struct {
	AlertSuppression *AlertSuppression `json:"alert_suppression,omitempty"`
	ResponseActions  []ResponseAction  `json:"response_actions,omitempty"`
	Language         EsqlQueryLanguage `json:"language"`
	Query            string            `json:"query"`
	// Rule type
	Type string `json:"type"`
}

// NewEsqlRuleCreateFields instantiates a new EsqlRuleCreateFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEsqlRuleCreateFields(language EsqlQueryLanguage, query string, type_ string) *EsqlRuleCreateFields {
	this := EsqlRuleCreateFields{}
	this.Language = language
	this.Query = query
	this.Type = type_
	return &this
}

// NewEsqlRuleCreateFieldsWithDefaults instantiates a new EsqlRuleCreateFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEsqlRuleCreateFieldsWithDefaults() *EsqlRuleCreateFields {
	this := EsqlRuleCreateFields{}
	return &this
}

// GetAlertSuppression returns the AlertSuppression field value if set, zero value otherwise.
func (o *EsqlRuleCreateFields) GetAlertSuppression() AlertSuppression {
	if o == nil || IsNil(o.AlertSuppression) {
		var ret AlertSuppression
		return ret
	}
	return *o.AlertSuppression
}

// GetAlertSuppressionOk returns a tuple with the AlertSuppression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsqlRuleCreateFields) GetAlertSuppressionOk() (*AlertSuppression, bool) {
	if o == nil || IsNil(o.AlertSuppression) {
		return nil, false
	}
	return o.AlertSuppression, true
}

// HasAlertSuppression returns a boolean if a field has been set.
func (o *EsqlRuleCreateFields) HasAlertSuppression() bool {
	if o != nil && !IsNil(o.AlertSuppression) {
		return true
	}

	return false
}

// SetAlertSuppression gets a reference to the given AlertSuppression and assigns it to the AlertSuppression field.
func (o *EsqlRuleCreateFields) SetAlertSuppression(v AlertSuppression) {
	o.AlertSuppression = &v
}

// GetResponseActions returns the ResponseActions field value if set, zero value otherwise.
func (o *EsqlRuleCreateFields) GetResponseActions() []ResponseAction {
	if o == nil || IsNil(o.ResponseActions) {
		var ret []ResponseAction
		return ret
	}
	return o.ResponseActions
}

// GetResponseActionsOk returns a tuple with the ResponseActions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EsqlRuleCreateFields) GetResponseActionsOk() ([]ResponseAction, bool) {
	if o == nil || IsNil(o.ResponseActions) {
		return nil, false
	}
	return o.ResponseActions, true
}

// HasResponseActions returns a boolean if a field has been set.
func (o *EsqlRuleCreateFields) HasResponseActions() bool {
	if o != nil && !IsNil(o.ResponseActions) {
		return true
	}

	return false
}

// SetResponseActions gets a reference to the given []ResponseAction and assigns it to the ResponseActions field.
func (o *EsqlRuleCreateFields) SetResponseActions(v []ResponseAction) {
	o.ResponseActions = v
}

// GetLanguage returns the Language field value
func (o *EsqlRuleCreateFields) GetLanguage() EsqlQueryLanguage {
	if o == nil {
		var ret EsqlQueryLanguage
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *EsqlRuleCreateFields) GetLanguageOk() (*EsqlQueryLanguage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *EsqlRuleCreateFields) SetLanguage(v EsqlQueryLanguage) {
	o.Language = v
}

// GetQuery returns the Query field value
func (o *EsqlRuleCreateFields) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *EsqlRuleCreateFields) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *EsqlRuleCreateFields) SetQuery(v string) {
	o.Query = v
}

// GetType returns the Type field value
func (o *EsqlRuleCreateFields) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EsqlRuleCreateFields) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EsqlRuleCreateFields) SetType(v string) {
	o.Type = v
}

func (o EsqlRuleCreateFields) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EsqlRuleCreateFields) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AlertSuppression) {
		toSerialize["alert_suppression"] = o.AlertSuppression
	}
	if !IsNil(o.ResponseActions) {
		toSerialize["response_actions"] = o.ResponseActions
	}
	toSerialize["language"] = o.Language
	toSerialize["query"] = o.Query
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableEsqlRuleCreateFields struct {
	value *EsqlRuleCreateFields
	isSet bool
}

func (v NullableEsqlRuleCreateFields) Get() *EsqlRuleCreateFields {
	return v.value
}

func (v *NullableEsqlRuleCreateFields) Set(val *EsqlRuleCreateFields) {
	v.value = val
	v.isSet = true
}

func (v NullableEsqlRuleCreateFields) IsSet() bool {
	return v.isSet
}

func (v *NullableEsqlRuleCreateFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEsqlRuleCreateFields(val *EsqlRuleCreateFields) *NullableEsqlRuleCreateFields {
	return &NullableEsqlRuleCreateFields{value: val, isSet: true}
}

func (v NullableEsqlRuleCreateFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEsqlRuleCreateFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
