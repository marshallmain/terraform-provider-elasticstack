/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
	"fmt"
)

// RuleExecutionStatus Custom execution status of Security rules that is different from the status used in the Alerting Framework. We merge our custom status with the Framework's status to determine the resulting status of a rule. - going to run - @deprecated Replaced by the 'running' status but left for backwards compatibility with rule execution events already written to Event Log in the prior versions of Kibana. Don't use when writing rule status changes. - running - Rule execution started but not reached any intermediate or final status. - partial failure - Rule can partially fail for various reasons either in the middle of an execution (in this case we update its status right away) or in the end of it. So currently this status can be both intermediate and final at the same time. A typical reason for a partial failure: not all the indices that the rule searches over actually exist. - failed - Rule failed to execute due to unhandled exception or a reason defined in the business logic of its executor function. - succeeded - Rule executed successfully without any issues. Note: this status is just an indication of a rule's \"health\". The rule might or might not generate any alerts despite of it.
type RuleExecutionStatus string

// List of RuleExecutionStatus
const (
	GOING_TO_RUN    RuleExecutionStatus = "going to run"
	RUNNING         RuleExecutionStatus = "running"
	PARTIAL_FAILURE RuleExecutionStatus = "partial failure"
	FAILED          RuleExecutionStatus = "failed"
	SUCCEEDED       RuleExecutionStatus = "succeeded"
)

// All allowed values of RuleExecutionStatus enum
var AllowedRuleExecutionStatusEnumValues = []RuleExecutionStatus{
	"going to run",
	"running",
	"partial failure",
	"failed",
	"succeeded",
}

func (v *RuleExecutionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RuleExecutionStatus(value)
	for _, existing := range AllowedRuleExecutionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RuleExecutionStatus", value)
}

// NewRuleExecutionStatusFromValue returns a pointer to a valid RuleExecutionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRuleExecutionStatusFromValue(v string) (*RuleExecutionStatus, error) {
	ev := RuleExecutionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RuleExecutionStatus: valid values are %v", v, AllowedRuleExecutionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RuleExecutionStatus) IsValid() bool {
	for _, existing := range AllowedRuleExecutionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RuleExecutionStatus value
func (v RuleExecutionStatus) Ptr() *RuleExecutionStatus {
	return &v
}

type NullableRuleExecutionStatus struct {
	value *RuleExecutionStatus
	isSet bool
}

func (v NullableRuleExecutionStatus) Get() *RuleExecutionStatus {
	return v.value
}

func (v *NullableRuleExecutionStatus) Set(val *RuleExecutionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleExecutionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleExecutionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleExecutionStatus(val *RuleExecutionStatus) *NullableRuleExecutionStatus {
	return &NullableRuleExecutionStatus{value: val, isSet: true}
}

func (v NullableRuleExecutionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleExecutionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
