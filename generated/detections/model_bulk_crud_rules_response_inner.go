/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
	"fmt"
)

// BulkCrudRulesResponseInner - struct for BulkCrudRulesResponseInner
type BulkCrudRulesResponseInner struct {
	ErrorSchema  *ErrorSchema
	RuleResponse *RuleResponse
}

// ErrorSchemaAsBulkCrudRulesResponseInner is a convenience function that returns ErrorSchema wrapped in BulkCrudRulesResponseInner
func ErrorSchemaAsBulkCrudRulesResponseInner(v *ErrorSchema) BulkCrudRulesResponseInner {
	return BulkCrudRulesResponseInner{
		ErrorSchema: v,
	}
}

// RuleResponseAsBulkCrudRulesResponseInner is a convenience function that returns RuleResponse wrapped in BulkCrudRulesResponseInner
func RuleResponseAsBulkCrudRulesResponseInner(v *RuleResponse) BulkCrudRulesResponseInner {
	return BulkCrudRulesResponseInner{
		RuleResponse: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BulkCrudRulesResponseInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ErrorSchema
	err = newStrictDecoder(data).Decode(&dst.ErrorSchema)
	if err == nil {
		jsonErrorSchema, _ := json.Marshal(dst.ErrorSchema)
		if string(jsonErrorSchema) == "{}" { // empty struct
			dst.ErrorSchema = nil
		} else {
			match++
		}
	} else {
		dst.ErrorSchema = nil
	}

	// try to unmarshal data into RuleResponse
	err = newStrictDecoder(data).Decode(&dst.RuleResponse)
	if err == nil {
		jsonRuleResponse, _ := json.Marshal(dst.RuleResponse)
		if string(jsonRuleResponse) == "{}" { // empty struct
			dst.RuleResponse = nil
		} else {
			match++
		}
	} else {
		dst.RuleResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ErrorSchema = nil
		dst.RuleResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BulkCrudRulesResponseInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BulkCrudRulesResponseInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BulkCrudRulesResponseInner) MarshalJSON() ([]byte, error) {
	if src.ErrorSchema != nil {
		return json.Marshal(&src.ErrorSchema)
	}

	if src.RuleResponse != nil {
		return json.Marshal(&src.RuleResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BulkCrudRulesResponseInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ErrorSchema != nil {
		return obj.ErrorSchema
	}

	if obj.RuleResponse != nil {
		return obj.RuleResponse
	}

	// all schemas are nil
	return nil
}

type NullableBulkCrudRulesResponseInner struct {
	value *BulkCrudRulesResponseInner
	isSet bool
}

func (v NullableBulkCrudRulesResponseInner) Get() *BulkCrudRulesResponseInner {
	return v.value
}

func (v *NullableBulkCrudRulesResponseInner) Set(val *BulkCrudRulesResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkCrudRulesResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkCrudRulesResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkCrudRulesResponseInner(val *BulkCrudRulesResponseInner) *NullableBulkCrudRulesResponseInner {
	return &NullableBulkCrudRulesResponseInner{value: val, isSet: true}
}

func (v NullableBulkCrudRulesResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkCrudRulesResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
