/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
)

// checks if the DefaultParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefaultParams{}

// DefaultParams struct for DefaultParams
type DefaultParams struct {
	Command string  `json:"command"`
	Comment *string `json:"comment,omitempty"`
}

// NewDefaultParams instantiates a new DefaultParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefaultParams(command string) *DefaultParams {
	this := DefaultParams{}
	this.Command = command
	return &this
}

// NewDefaultParamsWithDefaults instantiates a new DefaultParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefaultParamsWithDefaults() *DefaultParams {
	this := DefaultParams{}
	return &this
}

// GetCommand returns the Command field value
func (o *DefaultParams) GetCommand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Command
}

// GetCommandOk returns a tuple with the Command field value
// and a boolean to check if the value has been set.
func (o *DefaultParams) GetCommandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Command, true
}

// SetCommand sets field value
func (o *DefaultParams) SetCommand(v string) {
	o.Command = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DefaultParams) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultParams) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DefaultParams) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DefaultParams) SetComment(v string) {
	o.Comment = &v
}

func (o DefaultParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefaultParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["command"] = o.Command
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	return toSerialize, nil
}

type NullableDefaultParams struct {
	value *DefaultParams
	isSet bool
}

func (v NullableDefaultParams) Get() *DefaultParams {
	return v.value
}

func (v *NullableDefaultParams) Set(val *DefaultParams) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultParams) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultParams(val *DefaultParams) *NullableDefaultParams {
	return &NullableDefaultParams{value: val, isSet: true}
}

func (v NullableDefaultParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
