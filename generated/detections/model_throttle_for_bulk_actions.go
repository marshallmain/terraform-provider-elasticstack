/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
	"fmt"
)

// ThrottleForBulkActions The condition for throttling the notification: 'rule', 'no_actions', or time duration
type ThrottleForBulkActions string

// List of ThrottleForBulkActions
const (
	RULE ThrottleForBulkActions = "rule"
	_1H  ThrottleForBulkActions = "1h"
	_1D  ThrottleForBulkActions = "1d"
	_7D  ThrottleForBulkActions = "7d"
)

// All allowed values of ThrottleForBulkActions enum
var AllowedThrottleForBulkActionsEnumValues = []ThrottleForBulkActions{
	"rule",
	"1h",
	"1d",
	"7d",
}

func (v *ThrottleForBulkActions) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ThrottleForBulkActions(value)
	for _, existing := range AllowedThrottleForBulkActionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ThrottleForBulkActions", value)
}

// NewThrottleForBulkActionsFromValue returns a pointer to a valid ThrottleForBulkActions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewThrottleForBulkActionsFromValue(v string) (*ThrottleForBulkActions, error) {
	ev := ThrottleForBulkActions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ThrottleForBulkActions: valid values are %v", v, AllowedThrottleForBulkActionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ThrottleForBulkActions) IsValid() bool {
	for _, existing := range AllowedThrottleForBulkActionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ThrottleForBulkActions value
func (v ThrottleForBulkActions) Ptr() *ThrottleForBulkActions {
	return &v
}

type NullableThrottleForBulkActions struct {
	value *ThrottleForBulkActions
	isSet bool
}

func (v NullableThrottleForBulkActions) Get() *ThrottleForBulkActions {
	return v.value
}

func (v *NullableThrottleForBulkActions) Set(val *ThrottleForBulkActions) {
	v.value = val
	v.isSet = true
}

func (v NullableThrottleForBulkActions) IsSet() bool {
	return v.isSet
}

func (v *NullableThrottleForBulkActions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThrottleForBulkActions(val *ThrottleForBulkActions) *NullableThrottleForBulkActions {
	return &NullableThrottleForBulkActions{value: val, isSet: true}
}

func (v NullableThrottleForBulkActions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThrottleForBulkActions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
