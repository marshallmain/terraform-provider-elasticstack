/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
)

// checks if the RuleActionFrequency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleActionFrequency{}

// RuleActionFrequency The action frequency defines when the action runs (for example, only on rule execution or at specific time intervals).
type RuleActionFrequency struct {
	NotifyWhen RuleActionNotifyWhen `json:"notifyWhen"`
	// Action summary indicates whether we will send a summary notification about all the generate alerts or notification per individual alert
	Summary  bool               `json:"summary"`
	Throttle RuleActionThrottle `json:"throttle"`
}

// NewRuleActionFrequency instantiates a new RuleActionFrequency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleActionFrequency(notifyWhen RuleActionNotifyWhen, summary bool, throttle RuleActionThrottle) *RuleActionFrequency {
	this := RuleActionFrequency{}
	this.NotifyWhen = notifyWhen
	this.Summary = summary
	this.Throttle = throttle
	return &this
}

// NewRuleActionFrequencyWithDefaults instantiates a new RuleActionFrequency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleActionFrequencyWithDefaults() *RuleActionFrequency {
	this := RuleActionFrequency{}
	return &this
}

// GetNotifyWhen returns the NotifyWhen field value
func (o *RuleActionFrequency) GetNotifyWhen() RuleActionNotifyWhen {
	if o == nil {
		var ret RuleActionNotifyWhen
		return ret
	}

	return o.NotifyWhen
}

// GetNotifyWhenOk returns a tuple with the NotifyWhen field value
// and a boolean to check if the value has been set.
func (o *RuleActionFrequency) GetNotifyWhenOk() (*RuleActionNotifyWhen, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotifyWhen, true
}

// SetNotifyWhen sets field value
func (o *RuleActionFrequency) SetNotifyWhen(v RuleActionNotifyWhen) {
	o.NotifyWhen = v
}

// GetSummary returns the Summary field value
func (o *RuleActionFrequency) GetSummary() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *RuleActionFrequency) GetSummaryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary, true
}

// SetSummary sets field value
func (o *RuleActionFrequency) SetSummary(v bool) {
	o.Summary = v
}

// GetThrottle returns the Throttle field value
func (o *RuleActionFrequency) GetThrottle() RuleActionThrottle {
	if o == nil {
		var ret RuleActionThrottle
		return ret
	}

	return o.Throttle
}

// GetThrottleOk returns a tuple with the Throttle field value
// and a boolean to check if the value has been set.
func (o *RuleActionFrequency) GetThrottleOk() (*RuleActionThrottle, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Throttle, true
}

// SetThrottle sets field value
func (o *RuleActionFrequency) SetThrottle(v RuleActionThrottle) {
	o.Throttle = v
}

func (o RuleActionFrequency) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleActionFrequency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["notifyWhen"] = o.NotifyWhen
	toSerialize["summary"] = o.Summary
	toSerialize["throttle"] = o.Throttle
	return toSerialize, nil
}

type NullableRuleActionFrequency struct {
	value *RuleActionFrequency
	isSet bool
}

func (v NullableRuleActionFrequency) Get() *RuleActionFrequency {
	return v.value
}

func (v *NullableRuleActionFrequency) Set(val *RuleActionFrequency) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleActionFrequency) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleActionFrequency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleActionFrequency(val *RuleActionFrequency) *NullableRuleActionFrequency {
	return &NullableRuleActionFrequency{value: val, isSet: true}
}

func (v NullableRuleActionFrequency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleActionFrequency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
