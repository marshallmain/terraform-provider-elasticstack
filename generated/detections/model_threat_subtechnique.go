/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
)

// checks if the ThreatSubtechnique type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreatSubtechnique{}

// ThreatSubtechnique struct for ThreatSubtechnique
type ThreatSubtechnique struct {
	// Subtechnique ID
	Id string `json:"id"`
	// Subtechnique name
	Name string `json:"name"`
	// Subtechnique reference
	Reference string `json:"reference"`
}

// NewThreatSubtechnique instantiates a new ThreatSubtechnique object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreatSubtechnique(id string, name string, reference string) *ThreatSubtechnique {
	this := ThreatSubtechnique{}
	this.Id = id
	this.Name = name
	this.Reference = reference
	return &this
}

// NewThreatSubtechniqueWithDefaults instantiates a new ThreatSubtechnique object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreatSubtechniqueWithDefaults() *ThreatSubtechnique {
	this := ThreatSubtechnique{}
	return &this
}

// GetId returns the Id field value
func (o *ThreatSubtechnique) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ThreatSubtechnique) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ThreatSubtechnique) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ThreatSubtechnique) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ThreatSubtechnique) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ThreatSubtechnique) SetName(v string) {
	o.Name = v
}

// GetReference returns the Reference field value
func (o *ThreatSubtechnique) GetReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value
// and a boolean to check if the value has been set.
func (o *ThreatSubtechnique) GetReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reference, true
}

// SetReference sets field value
func (o *ThreatSubtechnique) SetReference(v string) {
	o.Reference = v
}

func (o ThreatSubtechnique) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreatSubtechnique) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["reference"] = o.Reference
	return toSerialize, nil
}

type NullableThreatSubtechnique struct {
	value *ThreatSubtechnique
	isSet bool
}

func (v NullableThreatSubtechnique) Get() *ThreatSubtechnique {
	return v.value
}

func (v *NullableThreatSubtechnique) Set(val *ThreatSubtechnique) {
	v.value = val
	v.isSet = true
}

func (v NullableThreatSubtechnique) IsSet() bool {
	return v.isSet
}

func (v *NullableThreatSubtechnique) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreatSubtechnique(val *ThreatSubtechnique) *NullableThreatSubtechnique {
	return &NullableThreatSubtechnique{value: val, isSet: true}
}

func (v NullableThreatSubtechnique) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreatSubtechnique) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
