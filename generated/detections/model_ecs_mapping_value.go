/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
)

// checks if the EcsMappingValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EcsMappingValue{}

// EcsMappingValue struct for EcsMappingValue
type EcsMappingValue struct {
	Field *string               `json:"field,omitempty"`
	Value *EcsMappingValueValue `json:"value,omitempty"`
}

// NewEcsMappingValue instantiates a new EcsMappingValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEcsMappingValue() *EcsMappingValue {
	this := EcsMappingValue{}
	return &this
}

// NewEcsMappingValueWithDefaults instantiates a new EcsMappingValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEcsMappingValueWithDefaults() *EcsMappingValue {
	this := EcsMappingValue{}
	return &this
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *EcsMappingValue) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EcsMappingValue) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *EcsMappingValue) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *EcsMappingValue) SetField(v string) {
	o.Field = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *EcsMappingValue) GetValue() EcsMappingValueValue {
	if o == nil || IsNil(o.Value) {
		var ret EcsMappingValueValue
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EcsMappingValue) GetValueOk() (*EcsMappingValueValue, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *EcsMappingValue) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given EcsMappingValueValue and assigns it to the Value field.
func (o *EcsMappingValue) SetValue(v EcsMappingValueValue) {
	o.Value = &v
}

func (o EcsMappingValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EcsMappingValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableEcsMappingValue struct {
	value *EcsMappingValue
	isSet bool
}

func (v NullableEcsMappingValue) Get() *EcsMappingValue {
	return v.value
}

func (v *NullableEcsMappingValue) Set(val *EcsMappingValue) {
	v.value = val
	v.isSet = true
}

func (v NullableEcsMappingValue) IsSet() bool {
	return v.isSet
}

func (v *NullableEcsMappingValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEcsMappingValue(val *EcsMappingValue) *NullableEcsMappingValue {
	return &NullableEcsMappingValue{value: val, isSet: true}
}

func (v NullableEcsMappingValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEcsMappingValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
