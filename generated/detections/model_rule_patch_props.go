/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
	"fmt"
)

// RulePatchProps struct for RulePatchProps
type RulePatchProps struct {
	EqlRulePatchProps             *EqlRulePatchProps
	EsqlRulePatchProps            *EsqlRulePatchProps
	MachineLearningRulePatchProps *MachineLearningRulePatchProps
	NewTermsRulePatchProps        *NewTermsRulePatchProps
	QueryRulePatchProps           *QueryRulePatchProps
	SavedQueryRulePatchProps      *SavedQueryRulePatchProps
	ThreatMatchRulePatchProps     *ThreatMatchRulePatchProps
	ThresholdRulePatchProps       *ThresholdRulePatchProps
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *RulePatchProps) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into EqlRulePatchProps
	err = json.Unmarshal(data, &dst.EqlRulePatchProps)
	if err == nil {
		jsonEqlRulePatchProps, _ := json.Marshal(dst.EqlRulePatchProps)
		if string(jsonEqlRulePatchProps) == "{}" { // empty struct
			dst.EqlRulePatchProps = nil
		} else {
			return nil // data stored in dst.EqlRulePatchProps, return on the first match
		}
	} else {
		dst.EqlRulePatchProps = nil
	}

	// try to unmarshal JSON data into EsqlRulePatchProps
	err = json.Unmarshal(data, &dst.EsqlRulePatchProps)
	if err == nil {
		jsonEsqlRulePatchProps, _ := json.Marshal(dst.EsqlRulePatchProps)
		if string(jsonEsqlRulePatchProps) == "{}" { // empty struct
			dst.EsqlRulePatchProps = nil
		} else {
			return nil // data stored in dst.EsqlRulePatchProps, return on the first match
		}
	} else {
		dst.EsqlRulePatchProps = nil
	}

	// try to unmarshal JSON data into MachineLearningRulePatchProps
	err = json.Unmarshal(data, &dst.MachineLearningRulePatchProps)
	if err == nil {
		jsonMachineLearningRulePatchProps, _ := json.Marshal(dst.MachineLearningRulePatchProps)
		if string(jsonMachineLearningRulePatchProps) == "{}" { // empty struct
			dst.MachineLearningRulePatchProps = nil
		} else {
			return nil // data stored in dst.MachineLearningRulePatchProps, return on the first match
		}
	} else {
		dst.MachineLearningRulePatchProps = nil
	}

	// try to unmarshal JSON data into NewTermsRulePatchProps
	err = json.Unmarshal(data, &dst.NewTermsRulePatchProps)
	if err == nil {
		jsonNewTermsRulePatchProps, _ := json.Marshal(dst.NewTermsRulePatchProps)
		if string(jsonNewTermsRulePatchProps) == "{}" { // empty struct
			dst.NewTermsRulePatchProps = nil
		} else {
			return nil // data stored in dst.NewTermsRulePatchProps, return on the first match
		}
	} else {
		dst.NewTermsRulePatchProps = nil
	}

	// try to unmarshal JSON data into QueryRulePatchProps
	err = json.Unmarshal(data, &dst.QueryRulePatchProps)
	if err == nil {
		jsonQueryRulePatchProps, _ := json.Marshal(dst.QueryRulePatchProps)
		if string(jsonQueryRulePatchProps) == "{}" { // empty struct
			dst.QueryRulePatchProps = nil
		} else {
			return nil // data stored in dst.QueryRulePatchProps, return on the first match
		}
	} else {
		dst.QueryRulePatchProps = nil
	}

	// try to unmarshal JSON data into SavedQueryRulePatchProps
	err = json.Unmarshal(data, &dst.SavedQueryRulePatchProps)
	if err == nil {
		jsonSavedQueryRulePatchProps, _ := json.Marshal(dst.SavedQueryRulePatchProps)
		if string(jsonSavedQueryRulePatchProps) == "{}" { // empty struct
			dst.SavedQueryRulePatchProps = nil
		} else {
			return nil // data stored in dst.SavedQueryRulePatchProps, return on the first match
		}
	} else {
		dst.SavedQueryRulePatchProps = nil
	}

	// try to unmarshal JSON data into ThreatMatchRulePatchProps
	err = json.Unmarshal(data, &dst.ThreatMatchRulePatchProps)
	if err == nil {
		jsonThreatMatchRulePatchProps, _ := json.Marshal(dst.ThreatMatchRulePatchProps)
		if string(jsonThreatMatchRulePatchProps) == "{}" { // empty struct
			dst.ThreatMatchRulePatchProps = nil
		} else {
			return nil // data stored in dst.ThreatMatchRulePatchProps, return on the first match
		}
	} else {
		dst.ThreatMatchRulePatchProps = nil
	}

	// try to unmarshal JSON data into ThresholdRulePatchProps
	err = json.Unmarshal(data, &dst.ThresholdRulePatchProps)
	if err == nil {
		jsonThresholdRulePatchProps, _ := json.Marshal(dst.ThresholdRulePatchProps)
		if string(jsonThresholdRulePatchProps) == "{}" { // empty struct
			dst.ThresholdRulePatchProps = nil
		} else {
			return nil // data stored in dst.ThresholdRulePatchProps, return on the first match
		}
	} else {
		dst.ThresholdRulePatchProps = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(RulePatchProps)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *RulePatchProps) MarshalJSON() ([]byte, error) {
	if src.EqlRulePatchProps != nil {
		return json.Marshal(&src.EqlRulePatchProps)
	}

	if src.EsqlRulePatchProps != nil {
		return json.Marshal(&src.EsqlRulePatchProps)
	}

	if src.MachineLearningRulePatchProps != nil {
		return json.Marshal(&src.MachineLearningRulePatchProps)
	}

	if src.NewTermsRulePatchProps != nil {
		return json.Marshal(&src.NewTermsRulePatchProps)
	}

	if src.QueryRulePatchProps != nil {
		return json.Marshal(&src.QueryRulePatchProps)
	}

	if src.SavedQueryRulePatchProps != nil {
		return json.Marshal(&src.SavedQueryRulePatchProps)
	}

	if src.ThreatMatchRulePatchProps != nil {
		return json.Marshal(&src.ThreatMatchRulePatchProps)
	}

	if src.ThresholdRulePatchProps != nil {
		return json.Marshal(&src.ThresholdRulePatchProps)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableRulePatchProps struct {
	value *RulePatchProps
	isSet bool
}

func (v NullableRulePatchProps) Get() *RulePatchProps {
	return v.value
}

func (v *NullableRulePatchProps) Set(val *RulePatchProps) {
	v.value = val
	v.isSet = true
}

func (v NullableRulePatchProps) IsSet() bool {
	return v.isSet
}

func (v *NullableRulePatchProps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRulePatchProps(val *RulePatchProps) *NullableRulePatchProps {
	return &NullableRulePatchProps{value: val, isSet: true}
}

func (v NullableRulePatchProps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRulePatchProps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
