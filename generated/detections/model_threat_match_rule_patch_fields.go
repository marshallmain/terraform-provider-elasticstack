/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
)

// checks if the ThreatMatchRulePatchFields type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreatMatchRulePatchFields{}

// ThreatMatchRulePatchFields struct for ThreatMatchRulePatchFields
type ThreatMatchRulePatchFields struct {
	AlertSuppression   *AlertSuppression `json:"alert_suppression,omitempty"`
	ConcurrentSearches *int32            `json:"concurrent_searches,omitempty"`
	DataViewId         *string           `json:"data_view_id,omitempty"`
	Filters            []interface{}     `json:"filters,omitempty"`
	Index              []string          `json:"index,omitempty"`
	ItemsPerSearch     *int32            `json:"items_per_search,omitempty"`
	SavedId            *string           `json:"saved_id,omitempty"`
	ThreatFilters      []interface{}     `json:"threat_filters,omitempty"`
	// Defines the path to the threat indicator in the indicator documents (optional)
	ThreatIndicatorPath *string              `json:"threat_indicator_path,omitempty"`
	ThreatLanguage      *KqlQueryLanguage    `json:"threat_language,omitempty"`
	Language            *KqlQueryLanguage    `json:"language,omitempty"`
	Query               *string              `json:"query,omitempty"`
	ThreatIndex         []string             `json:"threat_index,omitempty"`
	ThreatMapping       []ThreatMappingInner `json:"threat_mapping,omitempty"`
	// Query to run
	ThreatQuery *string `json:"threat_query,omitempty"`
	// Rule type
	Type *string `json:"type,omitempty"`
}

// NewThreatMatchRulePatchFields instantiates a new ThreatMatchRulePatchFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreatMatchRulePatchFields() *ThreatMatchRulePatchFields {
	this := ThreatMatchRulePatchFields{}
	return &this
}

// NewThreatMatchRulePatchFieldsWithDefaults instantiates a new ThreatMatchRulePatchFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreatMatchRulePatchFieldsWithDefaults() *ThreatMatchRulePatchFields {
	this := ThreatMatchRulePatchFields{}
	return &this
}

// GetAlertSuppression returns the AlertSuppression field value if set, zero value otherwise.
func (o *ThreatMatchRulePatchFields) GetAlertSuppression() AlertSuppression {
	if o == nil || IsNil(o.AlertSuppression) {
		var ret AlertSuppression
		return ret
	}
	return *o.AlertSuppression
}

// GetAlertSuppressionOk returns a tuple with the AlertSuppression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatMatchRulePatchFields) GetAlertSuppressionOk() (*AlertSuppression, bool) {
	if o == nil || IsNil(o.AlertSuppression) {
		return nil, false
	}
	return o.AlertSuppression, true
}

// HasAlertSuppression returns a boolean if a field has been set.
func (o *ThreatMatchRulePatchFields) HasAlertSuppression() bool {
	if o != nil && !IsNil(o.AlertSuppression) {
		return true
	}

	return false
}

// SetAlertSuppression gets a reference to the given AlertSuppression and assigns it to the AlertSuppression field.
func (o *ThreatMatchRulePatchFields) SetAlertSuppression(v AlertSuppression) {
	o.AlertSuppression = &v
}

// GetConcurrentSearches returns the ConcurrentSearches field value if set, zero value otherwise.
func (o *ThreatMatchRulePatchFields) GetConcurrentSearches() int32 {
	if o == nil || IsNil(o.ConcurrentSearches) {
		var ret int32
		return ret
	}
	return *o.ConcurrentSearches
}

// GetConcurrentSearchesOk returns a tuple with the ConcurrentSearches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatMatchRulePatchFields) GetConcurrentSearchesOk() (*int32, bool) {
	if o == nil || IsNil(o.ConcurrentSearches) {
		return nil, false
	}
	return o.ConcurrentSearches, true
}

// HasConcurrentSearches returns a boolean if a field has been set.
func (o *ThreatMatchRulePatchFields) HasConcurrentSearches() bool {
	if o != nil && !IsNil(o.ConcurrentSearches) {
		return true
	}

	return false
}

// SetConcurrentSearches gets a reference to the given int32 and assigns it to the ConcurrentSearches field.
func (o *ThreatMatchRulePatchFields) SetConcurrentSearches(v int32) {
	o.ConcurrentSearches = &v
}

// GetDataViewId returns the DataViewId field value if set, zero value otherwise.
func (o *ThreatMatchRulePatchFields) GetDataViewId() string {
	if o == nil || IsNil(o.DataViewId) {
		var ret string
		return ret
	}
	return *o.DataViewId
}

// GetDataViewIdOk returns a tuple with the DataViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatMatchRulePatchFields) GetDataViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.DataViewId) {
		return nil, false
	}
	return o.DataViewId, true
}

// HasDataViewId returns a boolean if a field has been set.
func (o *ThreatMatchRulePatchFields) HasDataViewId() bool {
	if o != nil && !IsNil(o.DataViewId) {
		return true
	}

	return false
}

// SetDataViewId gets a reference to the given string and assigns it to the DataViewId field.
func (o *ThreatMatchRulePatchFields) SetDataViewId(v string) {
	o.DataViewId = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *ThreatMatchRulePatchFields) GetFilters() []interface{} {
	if o == nil || IsNil(o.Filters) {
		var ret []interface{}
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatMatchRulePatchFields) GetFiltersOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *ThreatMatchRulePatchFields) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []interface{} and assigns it to the Filters field.
func (o *ThreatMatchRulePatchFields) SetFilters(v []interface{}) {
	o.Filters = v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *ThreatMatchRulePatchFields) GetIndex() []string {
	if o == nil || IsNil(o.Index) {
		var ret []string
		return ret
	}
	return o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatMatchRulePatchFields) GetIndexOk() ([]string, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *ThreatMatchRulePatchFields) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given []string and assigns it to the Index field.
func (o *ThreatMatchRulePatchFields) SetIndex(v []string) {
	o.Index = v
}

// GetItemsPerSearch returns the ItemsPerSearch field value if set, zero value otherwise.
func (o *ThreatMatchRulePatchFields) GetItemsPerSearch() int32 {
	if o == nil || IsNil(o.ItemsPerSearch) {
		var ret int32
		return ret
	}
	return *o.ItemsPerSearch
}

// GetItemsPerSearchOk returns a tuple with the ItemsPerSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatMatchRulePatchFields) GetItemsPerSearchOk() (*int32, bool) {
	if o == nil || IsNil(o.ItemsPerSearch) {
		return nil, false
	}
	return o.ItemsPerSearch, true
}

// HasItemsPerSearch returns a boolean if a field has been set.
func (o *ThreatMatchRulePatchFields) HasItemsPerSearch() bool {
	if o != nil && !IsNil(o.ItemsPerSearch) {
		return true
	}

	return false
}

// SetItemsPerSearch gets a reference to the given int32 and assigns it to the ItemsPerSearch field.
func (o *ThreatMatchRulePatchFields) SetItemsPerSearch(v int32) {
	o.ItemsPerSearch = &v
}

// GetSavedId returns the SavedId field value if set, zero value otherwise.
func (o *ThreatMatchRulePatchFields) GetSavedId() string {
	if o == nil || IsNil(o.SavedId) {
		var ret string
		return ret
	}
	return *o.SavedId
}

// GetSavedIdOk returns a tuple with the SavedId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatMatchRulePatchFields) GetSavedIdOk() (*string, bool) {
	if o == nil || IsNil(o.SavedId) {
		return nil, false
	}
	return o.SavedId, true
}

// HasSavedId returns a boolean if a field has been set.
func (o *ThreatMatchRulePatchFields) HasSavedId() bool {
	if o != nil && !IsNil(o.SavedId) {
		return true
	}

	return false
}

// SetSavedId gets a reference to the given string and assigns it to the SavedId field.
func (o *ThreatMatchRulePatchFields) SetSavedId(v string) {
	o.SavedId = &v
}

// GetThreatFilters returns the ThreatFilters field value if set, zero value otherwise.
func (o *ThreatMatchRulePatchFields) GetThreatFilters() []interface{} {
	if o == nil || IsNil(o.ThreatFilters) {
		var ret []interface{}
		return ret
	}
	return o.ThreatFilters
}

// GetThreatFiltersOk returns a tuple with the ThreatFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatMatchRulePatchFields) GetThreatFiltersOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.ThreatFilters) {
		return nil, false
	}
	return o.ThreatFilters, true
}

// HasThreatFilters returns a boolean if a field has been set.
func (o *ThreatMatchRulePatchFields) HasThreatFilters() bool {
	if o != nil && !IsNil(o.ThreatFilters) {
		return true
	}

	return false
}

// SetThreatFilters gets a reference to the given []interface{} and assigns it to the ThreatFilters field.
func (o *ThreatMatchRulePatchFields) SetThreatFilters(v []interface{}) {
	o.ThreatFilters = v
}

// GetThreatIndicatorPath returns the ThreatIndicatorPath field value if set, zero value otherwise.
func (o *ThreatMatchRulePatchFields) GetThreatIndicatorPath() string {
	if o == nil || IsNil(o.ThreatIndicatorPath) {
		var ret string
		return ret
	}
	return *o.ThreatIndicatorPath
}

// GetThreatIndicatorPathOk returns a tuple with the ThreatIndicatorPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatMatchRulePatchFields) GetThreatIndicatorPathOk() (*string, bool) {
	if o == nil || IsNil(o.ThreatIndicatorPath) {
		return nil, false
	}
	return o.ThreatIndicatorPath, true
}

// HasThreatIndicatorPath returns a boolean if a field has been set.
func (o *ThreatMatchRulePatchFields) HasThreatIndicatorPath() bool {
	if o != nil && !IsNil(o.ThreatIndicatorPath) {
		return true
	}

	return false
}

// SetThreatIndicatorPath gets a reference to the given string and assigns it to the ThreatIndicatorPath field.
func (o *ThreatMatchRulePatchFields) SetThreatIndicatorPath(v string) {
	o.ThreatIndicatorPath = &v
}

// GetThreatLanguage returns the ThreatLanguage field value if set, zero value otherwise.
func (o *ThreatMatchRulePatchFields) GetThreatLanguage() KqlQueryLanguage {
	if o == nil || IsNil(o.ThreatLanguage) {
		var ret KqlQueryLanguage
		return ret
	}
	return *o.ThreatLanguage
}

// GetThreatLanguageOk returns a tuple with the ThreatLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatMatchRulePatchFields) GetThreatLanguageOk() (*KqlQueryLanguage, bool) {
	if o == nil || IsNil(o.ThreatLanguage) {
		return nil, false
	}
	return o.ThreatLanguage, true
}

// HasThreatLanguage returns a boolean if a field has been set.
func (o *ThreatMatchRulePatchFields) HasThreatLanguage() bool {
	if o != nil && !IsNil(o.ThreatLanguage) {
		return true
	}

	return false
}

// SetThreatLanguage gets a reference to the given KqlQueryLanguage and assigns it to the ThreatLanguage field.
func (o *ThreatMatchRulePatchFields) SetThreatLanguage(v KqlQueryLanguage) {
	o.ThreatLanguage = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ThreatMatchRulePatchFields) GetLanguage() KqlQueryLanguage {
	if o == nil || IsNil(o.Language) {
		var ret KqlQueryLanguage
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatMatchRulePatchFields) GetLanguageOk() (*KqlQueryLanguage, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ThreatMatchRulePatchFields) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given KqlQueryLanguage and assigns it to the Language field.
func (o *ThreatMatchRulePatchFields) SetLanguage(v KqlQueryLanguage) {
	o.Language = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *ThreatMatchRulePatchFields) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatMatchRulePatchFields) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *ThreatMatchRulePatchFields) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *ThreatMatchRulePatchFields) SetQuery(v string) {
	o.Query = &v
}

// GetThreatIndex returns the ThreatIndex field value if set, zero value otherwise.
func (o *ThreatMatchRulePatchFields) GetThreatIndex() []string {
	if o == nil || IsNil(o.ThreatIndex) {
		var ret []string
		return ret
	}
	return o.ThreatIndex
}

// GetThreatIndexOk returns a tuple with the ThreatIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatMatchRulePatchFields) GetThreatIndexOk() ([]string, bool) {
	if o == nil || IsNil(o.ThreatIndex) {
		return nil, false
	}
	return o.ThreatIndex, true
}

// HasThreatIndex returns a boolean if a field has been set.
func (o *ThreatMatchRulePatchFields) HasThreatIndex() bool {
	if o != nil && !IsNil(o.ThreatIndex) {
		return true
	}

	return false
}

// SetThreatIndex gets a reference to the given []string and assigns it to the ThreatIndex field.
func (o *ThreatMatchRulePatchFields) SetThreatIndex(v []string) {
	o.ThreatIndex = v
}

// GetThreatMapping returns the ThreatMapping field value if set, zero value otherwise.
func (o *ThreatMatchRulePatchFields) GetThreatMapping() []ThreatMappingInner {
	if o == nil || IsNil(o.ThreatMapping) {
		var ret []ThreatMappingInner
		return ret
	}
	return o.ThreatMapping
}

// GetThreatMappingOk returns a tuple with the ThreatMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatMatchRulePatchFields) GetThreatMappingOk() ([]ThreatMappingInner, bool) {
	if o == nil || IsNil(o.ThreatMapping) {
		return nil, false
	}
	return o.ThreatMapping, true
}

// HasThreatMapping returns a boolean if a field has been set.
func (o *ThreatMatchRulePatchFields) HasThreatMapping() bool {
	if o != nil && !IsNil(o.ThreatMapping) {
		return true
	}

	return false
}

// SetThreatMapping gets a reference to the given []ThreatMappingInner and assigns it to the ThreatMapping field.
func (o *ThreatMatchRulePatchFields) SetThreatMapping(v []ThreatMappingInner) {
	o.ThreatMapping = v
}

// GetThreatQuery returns the ThreatQuery field value if set, zero value otherwise.
func (o *ThreatMatchRulePatchFields) GetThreatQuery() string {
	if o == nil || IsNil(o.ThreatQuery) {
		var ret string
		return ret
	}
	return *o.ThreatQuery
}

// GetThreatQueryOk returns a tuple with the ThreatQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatMatchRulePatchFields) GetThreatQueryOk() (*string, bool) {
	if o == nil || IsNil(o.ThreatQuery) {
		return nil, false
	}
	return o.ThreatQuery, true
}

// HasThreatQuery returns a boolean if a field has been set.
func (o *ThreatMatchRulePatchFields) HasThreatQuery() bool {
	if o != nil && !IsNil(o.ThreatQuery) {
		return true
	}

	return false
}

// SetThreatQuery gets a reference to the given string and assigns it to the ThreatQuery field.
func (o *ThreatMatchRulePatchFields) SetThreatQuery(v string) {
	o.ThreatQuery = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ThreatMatchRulePatchFields) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreatMatchRulePatchFields) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ThreatMatchRulePatchFields) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ThreatMatchRulePatchFields) SetType(v string) {
	o.Type = &v
}

func (o ThreatMatchRulePatchFields) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreatMatchRulePatchFields) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AlertSuppression) {
		toSerialize["alert_suppression"] = o.AlertSuppression
	}
	if !IsNil(o.ConcurrentSearches) {
		toSerialize["concurrent_searches"] = o.ConcurrentSearches
	}
	if !IsNil(o.DataViewId) {
		toSerialize["data_view_id"] = o.DataViewId
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.ItemsPerSearch) {
		toSerialize["items_per_search"] = o.ItemsPerSearch
	}
	if !IsNil(o.SavedId) {
		toSerialize["saved_id"] = o.SavedId
	}
	if !IsNil(o.ThreatFilters) {
		toSerialize["threat_filters"] = o.ThreatFilters
	}
	if !IsNil(o.ThreatIndicatorPath) {
		toSerialize["threat_indicator_path"] = o.ThreatIndicatorPath
	}
	if !IsNil(o.ThreatLanguage) {
		toSerialize["threat_language"] = o.ThreatLanguage
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.ThreatIndex) {
		toSerialize["threat_index"] = o.ThreatIndex
	}
	if !IsNil(o.ThreatMapping) {
		toSerialize["threat_mapping"] = o.ThreatMapping
	}
	if !IsNil(o.ThreatQuery) {
		toSerialize["threat_query"] = o.ThreatQuery
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableThreatMatchRulePatchFields struct {
	value *ThreatMatchRulePatchFields
	isSet bool
}

func (v NullableThreatMatchRulePatchFields) Get() *ThreatMatchRulePatchFields {
	return v.value
}

func (v *NullableThreatMatchRulePatchFields) Set(val *ThreatMatchRulePatchFields) {
	v.value = val
	v.isSet = true
}

func (v NullableThreatMatchRulePatchFields) IsSet() bool {
	return v.isSet
}

func (v *NullableThreatMatchRulePatchFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreatMatchRulePatchFields(val *ThreatMatchRulePatchFields) *NullableThreatMatchRulePatchFields {
	return &NullableThreatMatchRulePatchFields{value: val, isSet: true}
}

func (v NullableThreatMatchRulePatchFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreatMatchRulePatchFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
