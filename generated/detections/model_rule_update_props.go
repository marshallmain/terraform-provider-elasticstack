/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
	"fmt"
)

// RuleUpdateProps struct for RuleUpdateProps
type RuleUpdateProps struct {
	EqlRuleUpdateProps             *EqlRuleUpdateProps
	EsqlRuleUpdateProps            *EsqlRuleUpdateProps
	MachineLearningRuleUpdateProps *MachineLearningRuleUpdateProps
	NewTermsRuleUpdateProps        *NewTermsRuleUpdateProps
	QueryRuleUpdateProps           *QueryRuleUpdateProps
	SavedQueryRuleUpdateProps      *SavedQueryRuleUpdateProps
	ThreatMatchRuleUpdateProps     *ThreatMatchRuleUpdateProps
	ThresholdRuleUpdateProps       *ThresholdRuleUpdateProps
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *RuleUpdateProps) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'EqlRuleUpdateProps'
	if jsonDict["type"] == "EqlRuleUpdateProps" {
		// try to unmarshal JSON data into EqlRuleUpdateProps
		err = json.Unmarshal(data, &dst.EqlRuleUpdateProps)
		if err == nil {
			jsonEqlRuleUpdateProps, _ := json.Marshal(dst.EqlRuleUpdateProps)
			if string(jsonEqlRuleUpdateProps) == "{}" { // empty struct
				dst.EqlRuleUpdateProps = nil
			} else {
				return nil // data stored in dst.EqlRuleUpdateProps, return on the first match
			}
		} else {
			dst.EqlRuleUpdateProps = nil
		}
	}

	// check if the discriminator value is 'EsqlRuleUpdateProps'
	if jsonDict["type"] == "EsqlRuleUpdateProps" {
		// try to unmarshal JSON data into EsqlRuleUpdateProps
		err = json.Unmarshal(data, &dst.EsqlRuleUpdateProps)
		if err == nil {
			jsonEsqlRuleUpdateProps, _ := json.Marshal(dst.EsqlRuleUpdateProps)
			if string(jsonEsqlRuleUpdateProps) == "{}" { // empty struct
				dst.EsqlRuleUpdateProps = nil
			} else {
				return nil // data stored in dst.EsqlRuleUpdateProps, return on the first match
			}
		} else {
			dst.EsqlRuleUpdateProps = nil
		}
	}

	// check if the discriminator value is 'MachineLearningRuleUpdateProps'
	if jsonDict["type"] == "MachineLearningRuleUpdateProps" {
		// try to unmarshal JSON data into MachineLearningRuleUpdateProps
		err = json.Unmarshal(data, &dst.MachineLearningRuleUpdateProps)
		if err == nil {
			jsonMachineLearningRuleUpdateProps, _ := json.Marshal(dst.MachineLearningRuleUpdateProps)
			if string(jsonMachineLearningRuleUpdateProps) == "{}" { // empty struct
				dst.MachineLearningRuleUpdateProps = nil
			} else {
				return nil // data stored in dst.MachineLearningRuleUpdateProps, return on the first match
			}
		} else {
			dst.MachineLearningRuleUpdateProps = nil
		}
	}

	// check if the discriminator value is 'NewTermsRuleUpdateProps'
	if jsonDict["type"] == "NewTermsRuleUpdateProps" {
		// try to unmarshal JSON data into NewTermsRuleUpdateProps
		err = json.Unmarshal(data, &dst.NewTermsRuleUpdateProps)
		if err == nil {
			jsonNewTermsRuleUpdateProps, _ := json.Marshal(dst.NewTermsRuleUpdateProps)
			if string(jsonNewTermsRuleUpdateProps) == "{}" { // empty struct
				dst.NewTermsRuleUpdateProps = nil
			} else {
				return nil // data stored in dst.NewTermsRuleUpdateProps, return on the first match
			}
		} else {
			dst.NewTermsRuleUpdateProps = nil
		}
	}

	// check if the discriminator value is 'QueryRuleUpdateProps'
	if jsonDict["type"] == "QueryRuleUpdateProps" {
		// try to unmarshal JSON data into QueryRuleUpdateProps
		err = json.Unmarshal(data, &dst.QueryRuleUpdateProps)
		if err == nil {
			jsonQueryRuleUpdateProps, _ := json.Marshal(dst.QueryRuleUpdateProps)
			if string(jsonQueryRuleUpdateProps) == "{}" { // empty struct
				dst.QueryRuleUpdateProps = nil
			} else {
				return nil // data stored in dst.QueryRuleUpdateProps, return on the first match
			}
		} else {
			dst.QueryRuleUpdateProps = nil
		}
	}

	// check if the discriminator value is 'SavedQueryRuleUpdateProps'
	if jsonDict["type"] == "SavedQueryRuleUpdateProps" {
		// try to unmarshal JSON data into SavedQueryRuleUpdateProps
		err = json.Unmarshal(data, &dst.SavedQueryRuleUpdateProps)
		if err == nil {
			jsonSavedQueryRuleUpdateProps, _ := json.Marshal(dst.SavedQueryRuleUpdateProps)
			if string(jsonSavedQueryRuleUpdateProps) == "{}" { // empty struct
				dst.SavedQueryRuleUpdateProps = nil
			} else {
				return nil // data stored in dst.SavedQueryRuleUpdateProps, return on the first match
			}
		} else {
			dst.SavedQueryRuleUpdateProps = nil
		}
	}

	// check if the discriminator value is 'ThreatMatchRuleUpdateProps'
	if jsonDict["type"] == "ThreatMatchRuleUpdateProps" {
		// try to unmarshal JSON data into ThreatMatchRuleUpdateProps
		err = json.Unmarshal(data, &dst.ThreatMatchRuleUpdateProps)
		if err == nil {
			jsonThreatMatchRuleUpdateProps, _ := json.Marshal(dst.ThreatMatchRuleUpdateProps)
			if string(jsonThreatMatchRuleUpdateProps) == "{}" { // empty struct
				dst.ThreatMatchRuleUpdateProps = nil
			} else {
				return nil // data stored in dst.ThreatMatchRuleUpdateProps, return on the first match
			}
		} else {
			dst.ThreatMatchRuleUpdateProps = nil
		}
	}

	// check if the discriminator value is 'ThresholdRuleUpdateProps'
	if jsonDict["type"] == "ThresholdRuleUpdateProps" {
		// try to unmarshal JSON data into ThresholdRuleUpdateProps
		err = json.Unmarshal(data, &dst.ThresholdRuleUpdateProps)
		if err == nil {
			jsonThresholdRuleUpdateProps, _ := json.Marshal(dst.ThresholdRuleUpdateProps)
			if string(jsonThresholdRuleUpdateProps) == "{}" { // empty struct
				dst.ThresholdRuleUpdateProps = nil
			} else {
				return nil // data stored in dst.ThresholdRuleUpdateProps, return on the first match
			}
		} else {
			dst.ThresholdRuleUpdateProps = nil
		}
	}

	// try to unmarshal JSON data into EqlRuleUpdateProps
	err = json.Unmarshal(data, &dst.EqlRuleUpdateProps)
	if err == nil {
		jsonEqlRuleUpdateProps, _ := json.Marshal(dst.EqlRuleUpdateProps)
		if string(jsonEqlRuleUpdateProps) == "{}" { // empty struct
			dst.EqlRuleUpdateProps = nil
		} else {
			return nil // data stored in dst.EqlRuleUpdateProps, return on the first match
		}
	} else {
		dst.EqlRuleUpdateProps = nil
	}

	// try to unmarshal JSON data into EsqlRuleUpdateProps
	err = json.Unmarshal(data, &dst.EsqlRuleUpdateProps)
	if err == nil {
		jsonEsqlRuleUpdateProps, _ := json.Marshal(dst.EsqlRuleUpdateProps)
		if string(jsonEsqlRuleUpdateProps) == "{}" { // empty struct
			dst.EsqlRuleUpdateProps = nil
		} else {
			return nil // data stored in dst.EsqlRuleUpdateProps, return on the first match
		}
	} else {
		dst.EsqlRuleUpdateProps = nil
	}

	// try to unmarshal JSON data into MachineLearningRuleUpdateProps
	err = json.Unmarshal(data, &dst.MachineLearningRuleUpdateProps)
	if err == nil {
		jsonMachineLearningRuleUpdateProps, _ := json.Marshal(dst.MachineLearningRuleUpdateProps)
		if string(jsonMachineLearningRuleUpdateProps) == "{}" { // empty struct
			dst.MachineLearningRuleUpdateProps = nil
		} else {
			return nil // data stored in dst.MachineLearningRuleUpdateProps, return on the first match
		}
	} else {
		dst.MachineLearningRuleUpdateProps = nil
	}

	// try to unmarshal JSON data into NewTermsRuleUpdateProps
	err = json.Unmarshal(data, &dst.NewTermsRuleUpdateProps)
	if err == nil {
		jsonNewTermsRuleUpdateProps, _ := json.Marshal(dst.NewTermsRuleUpdateProps)
		if string(jsonNewTermsRuleUpdateProps) == "{}" { // empty struct
			dst.NewTermsRuleUpdateProps = nil
		} else {
			return nil // data stored in dst.NewTermsRuleUpdateProps, return on the first match
		}
	} else {
		dst.NewTermsRuleUpdateProps = nil
	}

	// try to unmarshal JSON data into QueryRuleUpdateProps
	err = json.Unmarshal(data, &dst.QueryRuleUpdateProps)
	if err == nil {
		jsonQueryRuleUpdateProps, _ := json.Marshal(dst.QueryRuleUpdateProps)
		if string(jsonQueryRuleUpdateProps) == "{}" { // empty struct
			dst.QueryRuleUpdateProps = nil
		} else {
			return nil // data stored in dst.QueryRuleUpdateProps, return on the first match
		}
	} else {
		dst.QueryRuleUpdateProps = nil
	}

	// try to unmarshal JSON data into SavedQueryRuleUpdateProps
	err = json.Unmarshal(data, &dst.SavedQueryRuleUpdateProps)
	if err == nil {
		jsonSavedQueryRuleUpdateProps, _ := json.Marshal(dst.SavedQueryRuleUpdateProps)
		if string(jsonSavedQueryRuleUpdateProps) == "{}" { // empty struct
			dst.SavedQueryRuleUpdateProps = nil
		} else {
			return nil // data stored in dst.SavedQueryRuleUpdateProps, return on the first match
		}
	} else {
		dst.SavedQueryRuleUpdateProps = nil
	}

	// try to unmarshal JSON data into ThreatMatchRuleUpdateProps
	err = json.Unmarshal(data, &dst.ThreatMatchRuleUpdateProps)
	if err == nil {
		jsonThreatMatchRuleUpdateProps, _ := json.Marshal(dst.ThreatMatchRuleUpdateProps)
		if string(jsonThreatMatchRuleUpdateProps) == "{}" { // empty struct
			dst.ThreatMatchRuleUpdateProps = nil
		} else {
			return nil // data stored in dst.ThreatMatchRuleUpdateProps, return on the first match
		}
	} else {
		dst.ThreatMatchRuleUpdateProps = nil
	}

	// try to unmarshal JSON data into ThresholdRuleUpdateProps
	err = json.Unmarshal(data, &dst.ThresholdRuleUpdateProps)
	if err == nil {
		jsonThresholdRuleUpdateProps, _ := json.Marshal(dst.ThresholdRuleUpdateProps)
		if string(jsonThresholdRuleUpdateProps) == "{}" { // empty struct
			dst.ThresholdRuleUpdateProps = nil
		} else {
			return nil // data stored in dst.ThresholdRuleUpdateProps, return on the first match
		}
	} else {
		dst.ThresholdRuleUpdateProps = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(RuleUpdateProps)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *RuleUpdateProps) MarshalJSON() ([]byte, error) {
	if src.EqlRuleUpdateProps != nil {
		return json.Marshal(&src.EqlRuleUpdateProps)
	}

	if src.EsqlRuleUpdateProps != nil {
		return json.Marshal(&src.EsqlRuleUpdateProps)
	}

	if src.MachineLearningRuleUpdateProps != nil {
		return json.Marshal(&src.MachineLearningRuleUpdateProps)
	}

	if src.NewTermsRuleUpdateProps != nil {
		return json.Marshal(&src.NewTermsRuleUpdateProps)
	}

	if src.QueryRuleUpdateProps != nil {
		return json.Marshal(&src.QueryRuleUpdateProps)
	}

	if src.SavedQueryRuleUpdateProps != nil {
		return json.Marshal(&src.SavedQueryRuleUpdateProps)
	}

	if src.ThreatMatchRuleUpdateProps != nil {
		return json.Marshal(&src.ThreatMatchRuleUpdateProps)
	}

	if src.ThresholdRuleUpdateProps != nil {
		return json.Marshal(&src.ThresholdRuleUpdateProps)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableRuleUpdateProps struct {
	value *RuleUpdateProps
	isSet bool
}

func (v NullableRuleUpdateProps) Get() *RuleUpdateProps {
	return v.value
}

func (v *NullableRuleUpdateProps) Set(val *RuleUpdateProps) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleUpdateProps) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleUpdateProps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleUpdateProps(val *RuleUpdateProps) *NullableRuleUpdateProps {
	return &NullableRuleUpdateProps{value: val, isSet: true}
}

func (v NullableRuleUpdateProps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleUpdateProps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
