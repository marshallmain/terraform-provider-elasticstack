/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
	"fmt"
)

// EsqlQueryLanguage the model 'EsqlQueryLanguage'
type EsqlQueryLanguage string

// List of EsqlQueryLanguage
const (
	ESQL EsqlQueryLanguage = "esql"
)

// All allowed values of EsqlQueryLanguage enum
var AllowedEsqlQueryLanguageEnumValues = []EsqlQueryLanguage{
	"esql",
}

func (v *EsqlQueryLanguage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EsqlQueryLanguage(value)
	for _, existing := range AllowedEsqlQueryLanguageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EsqlQueryLanguage", value)
}

// NewEsqlQueryLanguageFromValue returns a pointer to a valid EsqlQueryLanguage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEsqlQueryLanguageFromValue(v string) (*EsqlQueryLanguage, error) {
	ev := EsqlQueryLanguage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EsqlQueryLanguage: valid values are %v", v, AllowedEsqlQueryLanguageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EsqlQueryLanguage) IsValid() bool {
	for _, existing := range AllowedEsqlQueryLanguageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EsqlQueryLanguage value
func (v EsqlQueryLanguage) Ptr() *EsqlQueryLanguage {
	return &v
}

type NullableEsqlQueryLanguage struct {
	value *EsqlQueryLanguage
	isSet bool
}

func (v NullableEsqlQueryLanguage) Get() *EsqlQueryLanguage {
	return v.value
}

func (v *NullableEsqlQueryLanguage) Set(val *EsqlQueryLanguage) {
	v.value = val
	v.isSet = true
}

func (v NullableEsqlQueryLanguage) IsSet() bool {
	return v.isSet
}

func (v *NullableEsqlQueryLanguage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEsqlQueryLanguage(val *EsqlQueryLanguage) *NullableEsqlQueryLanguage {
	return &NullableEsqlQueryLanguage{value: val, isSet: true}
}

func (v NullableEsqlQueryLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEsqlQueryLanguage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
