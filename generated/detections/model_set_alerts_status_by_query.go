/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
)

// checks if the SetAlertsStatusByQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetAlertsStatusByQuery{}

// SetAlertsStatusByQuery struct for SetAlertsStatusByQuery
type SetAlertsStatusByQuery struct {
	Conflicts *string                `json:"conflicts,omitempty"`
	Query     map[string]interface{} `json:"query"`
	Status    AlertStatus            `json:"status"`
}

// NewSetAlertsStatusByQuery instantiates a new SetAlertsStatusByQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetAlertsStatusByQuery(query map[string]interface{}, status AlertStatus) *SetAlertsStatusByQuery {
	this := SetAlertsStatusByQuery{}
	var conflicts string = "abort"
	this.Conflicts = &conflicts
	this.Query = query
	this.Status = status
	return &this
}

// NewSetAlertsStatusByQueryWithDefaults instantiates a new SetAlertsStatusByQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetAlertsStatusByQueryWithDefaults() *SetAlertsStatusByQuery {
	this := SetAlertsStatusByQuery{}
	var conflicts string = "abort"
	this.Conflicts = &conflicts
	return &this
}

// GetConflicts returns the Conflicts field value if set, zero value otherwise.
func (o *SetAlertsStatusByQuery) GetConflicts() string {
	if o == nil || IsNil(o.Conflicts) {
		var ret string
		return ret
	}
	return *o.Conflicts
}

// GetConflictsOk returns a tuple with the Conflicts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetAlertsStatusByQuery) GetConflictsOk() (*string, bool) {
	if o == nil || IsNil(o.Conflicts) {
		return nil, false
	}
	return o.Conflicts, true
}

// HasConflicts returns a boolean if a field has been set.
func (o *SetAlertsStatusByQuery) HasConflicts() bool {
	if o != nil && !IsNil(o.Conflicts) {
		return true
	}

	return false
}

// SetConflicts gets a reference to the given string and assigns it to the Conflicts field.
func (o *SetAlertsStatusByQuery) SetConflicts(v string) {
	o.Conflicts = &v
}

// GetQuery returns the Query field value
func (o *SetAlertsStatusByQuery) GetQuery() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *SetAlertsStatusByQuery) GetQueryOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Query, true
}

// SetQuery sets field value
func (o *SetAlertsStatusByQuery) SetQuery(v map[string]interface{}) {
	o.Query = v
}

// GetStatus returns the Status field value
func (o *SetAlertsStatusByQuery) GetStatus() AlertStatus {
	if o == nil {
		var ret AlertStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SetAlertsStatusByQuery) GetStatusOk() (*AlertStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SetAlertsStatusByQuery) SetStatus(v AlertStatus) {
	o.Status = v
}

func (o SetAlertsStatusByQuery) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetAlertsStatusByQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conflicts) {
		toSerialize["conflicts"] = o.Conflicts
	}
	toSerialize["query"] = o.Query
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

type NullableSetAlertsStatusByQuery struct {
	value *SetAlertsStatusByQuery
	isSet bool
}

func (v NullableSetAlertsStatusByQuery) Get() *SetAlertsStatusByQuery {
	return v.value
}

func (v *NullableSetAlertsStatusByQuery) Set(val *SetAlertsStatusByQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableSetAlertsStatusByQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableSetAlertsStatusByQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetAlertsStatusByQuery(val *SetAlertsStatusByQuery) *NullableSetAlertsStatusByQuery {
	return &NullableSetAlertsStatusByQuery{value: val, isSet: true}
}

func (v NullableSetAlertsStatusByQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetAlertsStatusByQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
