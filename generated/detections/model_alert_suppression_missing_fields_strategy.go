/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
	"fmt"
)

// AlertSuppressionMissingFieldsStrategy Describes how alerts will be generated for documents with missing suppress by fields: doNotSuppress - per each document a separate alert will be created suppress - only alert will be created per suppress by bucket
type AlertSuppressionMissingFieldsStrategy string

// List of AlertSuppressionMissingFieldsStrategy
const (
	DO_NOT_SUPPRESS AlertSuppressionMissingFieldsStrategy = "doNotSuppress"
	SUPPRESS        AlertSuppressionMissingFieldsStrategy = "suppress"
)

// All allowed values of AlertSuppressionMissingFieldsStrategy enum
var AllowedAlertSuppressionMissingFieldsStrategyEnumValues = []AlertSuppressionMissingFieldsStrategy{
	"doNotSuppress",
	"suppress",
}

func (v *AlertSuppressionMissingFieldsStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertSuppressionMissingFieldsStrategy(value)
	for _, existing := range AllowedAlertSuppressionMissingFieldsStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertSuppressionMissingFieldsStrategy", value)
}

// NewAlertSuppressionMissingFieldsStrategyFromValue returns a pointer to a valid AlertSuppressionMissingFieldsStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertSuppressionMissingFieldsStrategyFromValue(v string) (*AlertSuppressionMissingFieldsStrategy, error) {
	ev := AlertSuppressionMissingFieldsStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertSuppressionMissingFieldsStrategy: valid values are %v", v, AllowedAlertSuppressionMissingFieldsStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertSuppressionMissingFieldsStrategy) IsValid() bool {
	for _, existing := range AllowedAlertSuppressionMissingFieldsStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertSuppressionMissingFieldsStrategy value
func (v AlertSuppressionMissingFieldsStrategy) Ptr() *AlertSuppressionMissingFieldsStrategy {
	return &v
}

type NullableAlertSuppressionMissingFieldsStrategy struct {
	value *AlertSuppressionMissingFieldsStrategy
	isSet bool
}

func (v NullableAlertSuppressionMissingFieldsStrategy) Get() *AlertSuppressionMissingFieldsStrategy {
	return v.value
}

func (v *NullableAlertSuppressionMissingFieldsStrategy) Set(val *AlertSuppressionMissingFieldsStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertSuppressionMissingFieldsStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertSuppressionMissingFieldsStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertSuppressionMissingFieldsStrategy(val *AlertSuppressionMissingFieldsStrategy) *NullableAlertSuppressionMissingFieldsStrategy {
	return &NullableAlertSuppressionMissingFieldsStrategy{value: val, isSet: true}
}

func (v NullableAlertSuppressionMissingFieldsStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertSuppressionMissingFieldsStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
