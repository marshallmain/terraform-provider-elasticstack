/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
	"fmt"
)

// BulkActionsDryRunErrCode the model 'BulkActionsDryRunErrCode'
type BulkActionsDryRunErrCode string

// List of BulkActionsDryRunErrCode
const (
	IMMUTABLE                      BulkActionsDryRunErrCode = "IMMUTABLE"
	MACHINE_LEARNING_AUTH          BulkActionsDryRunErrCode = "MACHINE_LEARNING_AUTH"
	MACHINE_LEARNING_INDEX_PATTERN BulkActionsDryRunErrCode = "MACHINE_LEARNING_INDEX_PATTERN"
	ESQL_INDEX_PATTERN             BulkActionsDryRunErrCode = "ESQL_INDEX_PATTERN"
	MANUAL_RULE_RUN_FEATURE        BulkActionsDryRunErrCode = "MANUAL_RULE_RUN_FEATURE"
	MANUAL_RULE_RUN_DISABLED_RULE  BulkActionsDryRunErrCode = "MANUAL_RULE_RUN_DISABLED_RULE"
)

// All allowed values of BulkActionsDryRunErrCode enum
var AllowedBulkActionsDryRunErrCodeEnumValues = []BulkActionsDryRunErrCode{
	"IMMUTABLE",
	"MACHINE_LEARNING_AUTH",
	"MACHINE_LEARNING_INDEX_PATTERN",
	"ESQL_INDEX_PATTERN",
	"MANUAL_RULE_RUN_FEATURE",
	"MANUAL_RULE_RUN_DISABLED_RULE",
}

func (v *BulkActionsDryRunErrCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BulkActionsDryRunErrCode(value)
	for _, existing := range AllowedBulkActionsDryRunErrCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BulkActionsDryRunErrCode", value)
}

// NewBulkActionsDryRunErrCodeFromValue returns a pointer to a valid BulkActionsDryRunErrCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBulkActionsDryRunErrCodeFromValue(v string) (*BulkActionsDryRunErrCode, error) {
	ev := BulkActionsDryRunErrCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BulkActionsDryRunErrCode: valid values are %v", v, AllowedBulkActionsDryRunErrCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BulkActionsDryRunErrCode) IsValid() bool {
	for _, existing := range AllowedBulkActionsDryRunErrCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BulkActionsDryRunErrCode value
func (v BulkActionsDryRunErrCode) Ptr() *BulkActionsDryRunErrCode {
	return &v
}

type NullableBulkActionsDryRunErrCode struct {
	value *BulkActionsDryRunErrCode
	isSet bool
}

func (v NullableBulkActionsDryRunErrCode) Get() *BulkActionsDryRunErrCode {
	return v.value
}

func (v *NullableBulkActionsDryRunErrCode) Set(val *BulkActionsDryRunErrCode) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkActionsDryRunErrCode) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkActionsDryRunErrCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkActionsDryRunErrCode(val *BulkActionsDryRunErrCode) *NullableBulkActionsDryRunErrCode {
	return &NullableBulkActionsDryRunErrCode{value: val, isSet: true}
}

func (v NullableBulkActionsDryRunErrCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkActionsDryRunErrCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
