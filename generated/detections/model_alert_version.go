/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
)

// checks if the AlertVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertVersion{}

// AlertVersion struct for AlertVersion
type AlertVersion struct {
	Count   int32 `json:"count"`
	Version int32 `json:"version"`
}

// NewAlertVersion instantiates a new AlertVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertVersion(count int32, version int32) *AlertVersion {
	this := AlertVersion{}
	this.Count = count
	this.Version = version
	return &this
}

// NewAlertVersionWithDefaults instantiates a new AlertVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertVersionWithDefaults() *AlertVersion {
	this := AlertVersion{}
	return &this
}

// GetCount returns the Count field value
func (o *AlertVersion) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *AlertVersion) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *AlertVersion) SetCount(v int32) {
	o.Count = v
}

// GetVersion returns the Version field value
func (o *AlertVersion) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *AlertVersion) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *AlertVersion) SetVersion(v int32) {
	o.Version = v
}

func (o AlertVersion) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

type NullableAlertVersion struct {
	value *AlertVersion
	isSet bool
}

func (v NullableAlertVersion) Get() *AlertVersion {
	return v.value
}

func (v *NullableAlertVersion) Set(val *AlertVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertVersion(val *AlertVersion) *NullableAlertVersion {
	return &NullableAlertVersion{value: val, isSet: true}
}

func (v NullableAlertVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
