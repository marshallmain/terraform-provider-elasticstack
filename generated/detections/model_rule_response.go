/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
	"fmt"
)

// RuleResponse struct for RuleResponse
type RuleResponse struct {
	EqlRule             *EqlRule
	EsqlRule            *EsqlRule
	MachineLearningRule *MachineLearningRule
	NewTermsRule        *NewTermsRule
	QueryRule           *QueryRule
	SavedQueryRule      *SavedQueryRule
	ThreatMatchRule     *ThreatMatchRule
	ThresholdRule       *ThresholdRule
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *RuleResponse) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'EqlRule'
	if jsonDict["type"] == "EqlRule" {
		// try to unmarshal JSON data into EqlRule
		err = json.Unmarshal(data, &dst.EqlRule)
		if err == nil {
			jsonEqlRule, _ := json.Marshal(dst.EqlRule)
			if string(jsonEqlRule) == "{}" { // empty struct
				dst.EqlRule = nil
			} else {
				return nil // data stored in dst.EqlRule, return on the first match
			}
		} else {
			dst.EqlRule = nil
		}
	}

	// check if the discriminator value is 'EsqlRule'
	if jsonDict["type"] == "EsqlRule" {
		// try to unmarshal JSON data into EsqlRule
		err = json.Unmarshal(data, &dst.EsqlRule)
		if err == nil {
			jsonEsqlRule, _ := json.Marshal(dst.EsqlRule)
			if string(jsonEsqlRule) == "{}" { // empty struct
				dst.EsqlRule = nil
			} else {
				return nil // data stored in dst.EsqlRule, return on the first match
			}
		} else {
			dst.EsqlRule = nil
		}
	}

	// check if the discriminator value is 'MachineLearningRule'
	if jsonDict["type"] == "MachineLearningRule" {
		// try to unmarshal JSON data into MachineLearningRule
		err = json.Unmarshal(data, &dst.MachineLearningRule)
		if err == nil {
			jsonMachineLearningRule, _ := json.Marshal(dst.MachineLearningRule)
			if string(jsonMachineLearningRule) == "{}" { // empty struct
				dst.MachineLearningRule = nil
			} else {
				return nil // data stored in dst.MachineLearningRule, return on the first match
			}
		} else {
			dst.MachineLearningRule = nil
		}
	}

	// check if the discriminator value is 'NewTermsRule'
	if jsonDict["type"] == "NewTermsRule" {
		// try to unmarshal JSON data into NewTermsRule
		err = json.Unmarshal(data, &dst.NewTermsRule)
		if err == nil {
			jsonNewTermsRule, _ := json.Marshal(dst.NewTermsRule)
			if string(jsonNewTermsRule) == "{}" { // empty struct
				dst.NewTermsRule = nil
			} else {
				return nil // data stored in dst.NewTermsRule, return on the first match
			}
		} else {
			dst.NewTermsRule = nil
		}
	}

	// check if the discriminator value is 'QueryRule'
	if jsonDict["type"] == "QueryRule" {
		// try to unmarshal JSON data into QueryRule
		err = json.Unmarshal(data, &dst.QueryRule)
		if err == nil {
			jsonQueryRule, _ := json.Marshal(dst.QueryRule)
			if string(jsonQueryRule) == "{}" { // empty struct
				dst.QueryRule = nil
			} else {
				return nil // data stored in dst.QueryRule, return on the first match
			}
		} else {
			dst.QueryRule = nil
		}
	}

	// check if the discriminator value is 'SavedQueryRule'
	if jsonDict["type"] == "SavedQueryRule" {
		// try to unmarshal JSON data into SavedQueryRule
		err = json.Unmarshal(data, &dst.SavedQueryRule)
		if err == nil {
			jsonSavedQueryRule, _ := json.Marshal(dst.SavedQueryRule)
			if string(jsonSavedQueryRule) == "{}" { // empty struct
				dst.SavedQueryRule = nil
			} else {
				return nil // data stored in dst.SavedQueryRule, return on the first match
			}
		} else {
			dst.SavedQueryRule = nil
		}
	}

	// check if the discriminator value is 'ThreatMatchRule'
	if jsonDict["type"] == "ThreatMatchRule" {
		// try to unmarshal JSON data into ThreatMatchRule
		err = json.Unmarshal(data, &dst.ThreatMatchRule)
		if err == nil {
			jsonThreatMatchRule, _ := json.Marshal(dst.ThreatMatchRule)
			if string(jsonThreatMatchRule) == "{}" { // empty struct
				dst.ThreatMatchRule = nil
			} else {
				return nil // data stored in dst.ThreatMatchRule, return on the first match
			}
		} else {
			dst.ThreatMatchRule = nil
		}
	}

	// check if the discriminator value is 'ThresholdRule'
	if jsonDict["type"] == "ThresholdRule" {
		// try to unmarshal JSON data into ThresholdRule
		err = json.Unmarshal(data, &dst.ThresholdRule)
		if err == nil {
			jsonThresholdRule, _ := json.Marshal(dst.ThresholdRule)
			if string(jsonThresholdRule) == "{}" { // empty struct
				dst.ThresholdRule = nil
			} else {
				return nil // data stored in dst.ThresholdRule, return on the first match
			}
		} else {
			dst.ThresholdRule = nil
		}
	}

	// try to unmarshal JSON data into EqlRule
	err = json.Unmarshal(data, &dst.EqlRule)
	if err == nil {
		jsonEqlRule, _ := json.Marshal(dst.EqlRule)
		if string(jsonEqlRule) == "{}" { // empty struct
			dst.EqlRule = nil
		} else {
			return nil // data stored in dst.EqlRule, return on the first match
		}
	} else {
		dst.EqlRule = nil
	}

	// try to unmarshal JSON data into EsqlRule
	err = json.Unmarshal(data, &dst.EsqlRule)
	if err == nil {
		jsonEsqlRule, _ := json.Marshal(dst.EsqlRule)
		if string(jsonEsqlRule) == "{}" { // empty struct
			dst.EsqlRule = nil
		} else {
			return nil // data stored in dst.EsqlRule, return on the first match
		}
	} else {
		dst.EsqlRule = nil
	}

	// try to unmarshal JSON data into MachineLearningRule
	err = json.Unmarshal(data, &dst.MachineLearningRule)
	if err == nil {
		jsonMachineLearningRule, _ := json.Marshal(dst.MachineLearningRule)
		if string(jsonMachineLearningRule) == "{}" { // empty struct
			dst.MachineLearningRule = nil
		} else {
			return nil // data stored in dst.MachineLearningRule, return on the first match
		}
	} else {
		dst.MachineLearningRule = nil
	}

	// try to unmarshal JSON data into NewTermsRule
	err = json.Unmarshal(data, &dst.NewTermsRule)
	if err == nil {
		jsonNewTermsRule, _ := json.Marshal(dst.NewTermsRule)
		if string(jsonNewTermsRule) == "{}" { // empty struct
			dst.NewTermsRule = nil
		} else {
			return nil // data stored in dst.NewTermsRule, return on the first match
		}
	} else {
		dst.NewTermsRule = nil
	}

	// try to unmarshal JSON data into QueryRule
	err = json.Unmarshal(data, &dst.QueryRule)
	if err == nil {
		jsonQueryRule, _ := json.Marshal(dst.QueryRule)
		if string(jsonQueryRule) == "{}" { // empty struct
			dst.QueryRule = nil
		} else {
			return nil // data stored in dst.QueryRule, return on the first match
		}
	} else {
		dst.QueryRule = nil
	}

	// try to unmarshal JSON data into SavedQueryRule
	err = json.Unmarshal(data, &dst.SavedQueryRule)
	if err == nil {
		jsonSavedQueryRule, _ := json.Marshal(dst.SavedQueryRule)
		if string(jsonSavedQueryRule) == "{}" { // empty struct
			dst.SavedQueryRule = nil
		} else {
			return nil // data stored in dst.SavedQueryRule, return on the first match
		}
	} else {
		dst.SavedQueryRule = nil
	}

	// try to unmarshal JSON data into ThreatMatchRule
	err = json.Unmarshal(data, &dst.ThreatMatchRule)
	if err == nil {
		jsonThreatMatchRule, _ := json.Marshal(dst.ThreatMatchRule)
		if string(jsonThreatMatchRule) == "{}" { // empty struct
			dst.ThreatMatchRule = nil
		} else {
			return nil // data stored in dst.ThreatMatchRule, return on the first match
		}
	} else {
		dst.ThreatMatchRule = nil
	}

	// try to unmarshal JSON data into ThresholdRule
	err = json.Unmarshal(data, &dst.ThresholdRule)
	if err == nil {
		jsonThresholdRule, _ := json.Marshal(dst.ThresholdRule)
		if string(jsonThresholdRule) == "{}" { // empty struct
			dst.ThresholdRule = nil
		} else {
			return nil // data stored in dst.ThresholdRule, return on the first match
		}
	} else {
		dst.ThresholdRule = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(RuleResponse)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *RuleResponse) MarshalJSON() ([]byte, error) {
	if src.EqlRule != nil {
		return json.Marshal(&src.EqlRule)
	}

	if src.EsqlRule != nil {
		return json.Marshal(&src.EsqlRule)
	}

	if src.MachineLearningRule != nil {
		return json.Marshal(&src.MachineLearningRule)
	}

	if src.NewTermsRule != nil {
		return json.Marshal(&src.NewTermsRule)
	}

	if src.QueryRule != nil {
		return json.Marshal(&src.QueryRule)
	}

	if src.SavedQueryRule != nil {
		return json.Marshal(&src.SavedQueryRule)
	}

	if src.ThreatMatchRule != nil {
		return json.Marshal(&src.ThreatMatchRule)
	}

	if src.ThresholdRule != nil {
		return json.Marshal(&src.ThresholdRule)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableRuleResponse struct {
	value *RuleResponse
	isSet bool
}

func (v NullableRuleResponse) Get() *RuleResponse {
	return v.value
}

func (v *NullableRuleResponse) Set(val *RuleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleResponse(val *RuleResponse) *NullableRuleResponse {
	return &NullableRuleResponse{value: val, isSet: true}
}

func (v NullableRuleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
