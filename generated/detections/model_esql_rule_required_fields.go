/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
)

// checks if the EsqlRuleRequiredFields type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EsqlRuleRequiredFields{}

// EsqlRuleRequiredFields struct for EsqlRuleRequiredFields
type EsqlRuleRequiredFields struct {
	Language EsqlQueryLanguage `json:"language"`
	Query    string            `json:"query"`
	// Rule type
	Type string `json:"type"`
}

// NewEsqlRuleRequiredFields instantiates a new EsqlRuleRequiredFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEsqlRuleRequiredFields(language EsqlQueryLanguage, query string, type_ string) *EsqlRuleRequiredFields {
	this := EsqlRuleRequiredFields{}
	this.Language = language
	this.Query = query
	this.Type = type_
	return &this
}

// NewEsqlRuleRequiredFieldsWithDefaults instantiates a new EsqlRuleRequiredFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEsqlRuleRequiredFieldsWithDefaults() *EsqlRuleRequiredFields {
	this := EsqlRuleRequiredFields{}
	return &this
}

// GetLanguage returns the Language field value
func (o *EsqlRuleRequiredFields) GetLanguage() EsqlQueryLanguage {
	if o == nil {
		var ret EsqlQueryLanguage
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *EsqlRuleRequiredFields) GetLanguageOk() (*EsqlQueryLanguage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *EsqlRuleRequiredFields) SetLanguage(v EsqlQueryLanguage) {
	o.Language = v
}

// GetQuery returns the Query field value
func (o *EsqlRuleRequiredFields) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *EsqlRuleRequiredFields) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *EsqlRuleRequiredFields) SetQuery(v string) {
	o.Query = v
}

// GetType returns the Type field value
func (o *EsqlRuleRequiredFields) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EsqlRuleRequiredFields) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EsqlRuleRequiredFields) SetType(v string) {
	o.Type = v
}

func (o EsqlRuleRequiredFields) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EsqlRuleRequiredFields) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["language"] = o.Language
	toSerialize["query"] = o.Query
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableEsqlRuleRequiredFields struct {
	value *EsqlRuleRequiredFields
	isSet bool
}

func (v NullableEsqlRuleRequiredFields) Get() *EsqlRuleRequiredFields {
	return v.value
}

func (v *NullableEsqlRuleRequiredFields) Set(val *EsqlRuleRequiredFields) {
	v.value = val
	v.isSet = true
}

func (v NullableEsqlRuleRequiredFields) IsSet() bool {
	return v.isSet
}

func (v *NullableEsqlRuleRequiredFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEsqlRuleRequiredFields(val *EsqlRuleRequiredFields) *NullableEsqlRuleRequiredFields {
	return &NullableEsqlRuleRequiredFields{value: val, isSet: true}
}

func (v NullableEsqlRuleRequiredFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEsqlRuleRequiredFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
