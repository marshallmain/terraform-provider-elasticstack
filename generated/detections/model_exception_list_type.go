/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
	"fmt"
)

// ExceptionListType The exception type
type ExceptionListType string

// List of ExceptionListType
const (
	DETECTION                          ExceptionListType = "detection"
	RULE_DEFAULT                       ExceptionListType = "rule_default"
	ENDPOINT                           ExceptionListType = "endpoint"
	ENDPOINT_TRUSTED_APPS              ExceptionListType = "endpoint_trusted_apps"
	ENDPOINT_EVENTS                    ExceptionListType = "endpoint_events"
	ENDPOINT_HOST_ISOLATION_EXCEPTIONS ExceptionListType = "endpoint_host_isolation_exceptions"
	ENDPOINT_BLOCKLISTS                ExceptionListType = "endpoint_blocklists"
)

// All allowed values of ExceptionListType enum
var AllowedExceptionListTypeEnumValues = []ExceptionListType{
	"detection",
	"rule_default",
	"endpoint",
	"endpoint_trusted_apps",
	"endpoint_events",
	"endpoint_host_isolation_exceptions",
	"endpoint_blocklists",
}

func (v *ExceptionListType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExceptionListType(value)
	for _, existing := range AllowedExceptionListTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExceptionListType", value)
}

// NewExceptionListTypeFromValue returns a pointer to a valid ExceptionListType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExceptionListTypeFromValue(v string) (*ExceptionListType, error) {
	ev := ExceptionListType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExceptionListType: valid values are %v", v, AllowedExceptionListTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExceptionListType) IsValid() bool {
	for _, existing := range AllowedExceptionListTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExceptionListType value
func (v ExceptionListType) Ptr() *ExceptionListType {
	return &v
}

type NullableExceptionListType struct {
	value *ExceptionListType
	isSet bool
}

func (v NullableExceptionListType) Get() *ExceptionListType {
	return v.value
}

func (v *NullableExceptionListType) Set(val *ExceptionListType) {
	v.value = val
	v.isSet = true
}

func (v NullableExceptionListType) IsSet() bool {
	return v.isSet
}

func (v *NullableExceptionListType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExceptionListType(val *ExceptionListType) *NullableExceptionListType {
	return &NullableExceptionListType{value: val, isSet: true}
}

func (v NullableExceptionListType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExceptionListType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
