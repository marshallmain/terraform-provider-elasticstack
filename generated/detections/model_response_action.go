/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
	"fmt"
)

// ResponseAction - struct for ResponseAction
type ResponseAction struct {
	EndpointResponseAction *EndpointResponseAction
	OsqueryResponseAction  *OsqueryResponseAction
}

// EndpointResponseActionAsResponseAction is a convenience function that returns EndpointResponseAction wrapped in ResponseAction
func EndpointResponseActionAsResponseAction(v *EndpointResponseAction) ResponseAction {
	return ResponseAction{
		EndpointResponseAction: v,
	}
}

// OsqueryResponseActionAsResponseAction is a convenience function that returns OsqueryResponseAction wrapped in ResponseAction
func OsqueryResponseActionAsResponseAction(v *OsqueryResponseAction) ResponseAction {
	return ResponseAction{
		OsqueryResponseAction: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ResponseAction) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EndpointResponseAction
	err = newStrictDecoder(data).Decode(&dst.EndpointResponseAction)
	if err == nil {
		jsonEndpointResponseAction, _ := json.Marshal(dst.EndpointResponseAction)
		if string(jsonEndpointResponseAction) == "{}" { // empty struct
			dst.EndpointResponseAction = nil
		} else {
			match++
		}
	} else {
		dst.EndpointResponseAction = nil
	}

	// try to unmarshal data into OsqueryResponseAction
	err = newStrictDecoder(data).Decode(&dst.OsqueryResponseAction)
	if err == nil {
		jsonOsqueryResponseAction, _ := json.Marshal(dst.OsqueryResponseAction)
		if string(jsonOsqueryResponseAction) == "{}" { // empty struct
			dst.OsqueryResponseAction = nil
		} else {
			match++
		}
	} else {
		dst.OsqueryResponseAction = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EndpointResponseAction = nil
		dst.OsqueryResponseAction = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ResponseAction)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ResponseAction)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ResponseAction) MarshalJSON() ([]byte, error) {
	if src.EndpointResponseAction != nil {
		return json.Marshal(&src.EndpointResponseAction)
	}

	if src.OsqueryResponseAction != nil {
		return json.Marshal(&src.OsqueryResponseAction)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ResponseAction) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.EndpointResponseAction != nil {
		return obj.EndpointResponseAction
	}

	if obj.OsqueryResponseAction != nil {
		return obj.OsqueryResponseAction
	}

	// all schemas are nil
	return nil
}

type NullableResponseAction struct {
	value *ResponseAction
	isSet bool
}

func (v NullableResponseAction) Get() *ResponseAction {
	return v.value
}

func (v *NullableResponseAction) Set(val *ResponseAction) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseAction) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseAction(val *ResponseAction) *NullableResponseAction {
	return &NullableResponseAction{value: val, isSet: true}
}

func (v NullableResponseAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
