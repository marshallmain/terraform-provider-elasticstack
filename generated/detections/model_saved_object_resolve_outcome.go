/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
	"fmt"
)

// SavedObjectResolveOutcome the model 'SavedObjectResolveOutcome'
type SavedObjectResolveOutcome string

// List of SavedObjectResolveOutcome
const (
	EXACT_MATCH SavedObjectResolveOutcome = "exactMatch"
	ALIAS_MATCH SavedObjectResolveOutcome = "aliasMatch"
	CONFLICT    SavedObjectResolveOutcome = "conflict"
)

// All allowed values of SavedObjectResolveOutcome enum
var AllowedSavedObjectResolveOutcomeEnumValues = []SavedObjectResolveOutcome{
	"exactMatch",
	"aliasMatch",
	"conflict",
}

func (v *SavedObjectResolveOutcome) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SavedObjectResolveOutcome(value)
	for _, existing := range AllowedSavedObjectResolveOutcomeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SavedObjectResolveOutcome", value)
}

// NewSavedObjectResolveOutcomeFromValue returns a pointer to a valid SavedObjectResolveOutcome
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSavedObjectResolveOutcomeFromValue(v string) (*SavedObjectResolveOutcome, error) {
	ev := SavedObjectResolveOutcome(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SavedObjectResolveOutcome: valid values are %v", v, AllowedSavedObjectResolveOutcomeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SavedObjectResolveOutcome) IsValid() bool {
	for _, existing := range AllowedSavedObjectResolveOutcomeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SavedObjectResolveOutcome value
func (v SavedObjectResolveOutcome) Ptr() *SavedObjectResolveOutcome {
	return &v
}

type NullableSavedObjectResolveOutcome struct {
	value *SavedObjectResolveOutcome
	isSet bool
}

func (v NullableSavedObjectResolveOutcome) Get() *SavedObjectResolveOutcome {
	return v.value
}

func (v *NullableSavedObjectResolveOutcome) Set(val *SavedObjectResolveOutcome) {
	v.value = val
	v.isSet = true
}

func (v NullableSavedObjectResolveOutcome) IsSet() bool {
	return v.isSet
}

func (v *NullableSavedObjectResolveOutcome) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSavedObjectResolveOutcome(val *SavedObjectResolveOutcome) *NullableSavedObjectResolveOutcome {
	return &NullableSavedObjectResolveOutcome{value: val, isSet: true}
}

func (v NullableSavedObjectResolveOutcome) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSavedObjectResolveOutcome) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
