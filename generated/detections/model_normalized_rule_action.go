/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
)

// checks if the NormalizedRuleAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NormalizedRuleAction{}

// NormalizedRuleAction struct for NormalizedRuleAction
type NormalizedRuleAction struct {
	AlertsFilter map[string]interface{} `json:"alerts_filter,omitempty"`
	Frequency    *RuleActionFrequency   `json:"frequency,omitempty"`
	// Optionally groups actions by use cases. Use `default` for alert notifications.
	Group *string `json:"group,omitempty"`
	// The connector ID.
	Id string `json:"id"`
	// Object containing the allowed connector fields, which varies according to the connector type.
	Params map[string]interface{} `json:"params"`
}

// NewNormalizedRuleAction instantiates a new NormalizedRuleAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNormalizedRuleAction(id string, params map[string]interface{}) *NormalizedRuleAction {
	this := NormalizedRuleAction{}
	this.Id = id
	this.Params = params
	return &this
}

// NewNormalizedRuleActionWithDefaults instantiates a new NormalizedRuleAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNormalizedRuleActionWithDefaults() *NormalizedRuleAction {
	this := NormalizedRuleAction{}
	return &this
}

// GetAlertsFilter returns the AlertsFilter field value if set, zero value otherwise.
func (o *NormalizedRuleAction) GetAlertsFilter() map[string]interface{} {
	if o == nil || IsNil(o.AlertsFilter) {
		var ret map[string]interface{}
		return ret
	}
	return o.AlertsFilter
}

// GetAlertsFilterOk returns a tuple with the AlertsFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedRuleAction) GetAlertsFilterOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AlertsFilter) {
		return map[string]interface{}{}, false
	}
	return o.AlertsFilter, true
}

// HasAlertsFilter returns a boolean if a field has been set.
func (o *NormalizedRuleAction) HasAlertsFilter() bool {
	if o != nil && !IsNil(o.AlertsFilter) {
		return true
	}

	return false
}

// SetAlertsFilter gets a reference to the given map[string]interface{} and assigns it to the AlertsFilter field.
func (o *NormalizedRuleAction) SetAlertsFilter(v map[string]interface{}) {
	o.AlertsFilter = v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *NormalizedRuleAction) GetFrequency() RuleActionFrequency {
	if o == nil || IsNil(o.Frequency) {
		var ret RuleActionFrequency
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedRuleAction) GetFrequencyOk() (*RuleActionFrequency, bool) {
	if o == nil || IsNil(o.Frequency) {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *NormalizedRuleAction) HasFrequency() bool {
	if o != nil && !IsNil(o.Frequency) {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given RuleActionFrequency and assigns it to the Frequency field.
func (o *NormalizedRuleAction) SetFrequency(v RuleActionFrequency) {
	o.Frequency = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *NormalizedRuleAction) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NormalizedRuleAction) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *NormalizedRuleAction) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *NormalizedRuleAction) SetGroup(v string) {
	o.Group = &v
}

// GetId returns the Id field value
func (o *NormalizedRuleAction) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NormalizedRuleAction) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NormalizedRuleAction) SetId(v string) {
	o.Id = v
}

// GetParams returns the Params field value
func (o *NormalizedRuleAction) GetParams() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *NormalizedRuleAction) GetParamsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Params, true
}

// SetParams sets field value
func (o *NormalizedRuleAction) SetParams(v map[string]interface{}) {
	o.Params = v
}

func (o NormalizedRuleAction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NormalizedRuleAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AlertsFilter) {
		toSerialize["alerts_filter"] = o.AlertsFilter
	}
	if !IsNil(o.Frequency) {
		toSerialize["frequency"] = o.Frequency
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	toSerialize["id"] = o.Id
	toSerialize["params"] = o.Params
	return toSerialize, nil
}

type NullableNormalizedRuleAction struct {
	value *NormalizedRuleAction
	isSet bool
}

func (v NullableNormalizedRuleAction) Get() *NormalizedRuleAction {
	return v.value
}

func (v *NullableNormalizedRuleAction) Set(val *NormalizedRuleAction) {
	v.value = val
	v.isSet = true
}

func (v NullableNormalizedRuleAction) IsSet() bool {
	return v.isSet
}

func (v *NullableNormalizedRuleAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNormalizedRuleAction(val *NormalizedRuleAction) *NullableNormalizedRuleAction {
	return &NullableNormalizedRuleAction{value: val, isSet: true}
}

func (v NullableNormalizedRuleAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNormalizedRuleAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
