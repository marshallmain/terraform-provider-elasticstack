/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type SecurityDetectionsAPI interface {

	/*
		BulkPatchRules Patch multiple detection rules

		Update specific fields of existing detection rules using the `rule_id` or `id` field.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiBulkPatchRulesRequest

		Deprecated
	*/
	BulkPatchRules(ctx context.Context) ApiBulkPatchRulesRequest

	// BulkPatchRulesExecute executes the request
	//  @return []BulkCrudRulesResponseInner
	// Deprecated
	BulkPatchRulesExecute(r ApiBulkPatchRulesRequest) ([]BulkCrudRulesResponseInner, *http.Response, error)

	/*
		BulkUpdateRules Update multiple detection rules

		Update multiple detection rules using the `rule_id` or `id` field. The original rules are replaced, and all unspecified fields are deleted.
	> info
	> You cannot modify the `id` or `rule_id` values.


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiBulkUpdateRulesRequest

		Deprecated
	*/
	BulkUpdateRules(ctx context.Context) ApiBulkUpdateRulesRequest

	// BulkUpdateRulesExecute executes the request
	//  @return []BulkCrudRulesResponseInner
	// Deprecated
	BulkUpdateRulesExecute(r ApiBulkUpdateRulesRequest) ([]BulkCrudRulesResponseInner, *http.Response, error)

	/*
		CreateRule Create a detection rule

		Create a new detection rule.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param spaceId
		@return ApiCreateRuleRequest
	*/
	CreateRule(ctx context.Context, spaceId string) ApiCreateRuleRequest

	// CreateRuleExecute executes the request
	//  @return RuleResponse
	CreateRuleExecute(r ApiCreateRuleRequest) (*RuleResponse, *http.Response, error)

	/*
		DeleteRule Delete a detection rule

		Delete a detection rule using the `rule_id` or `id` field.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param spaceId
		@return ApiDeleteRuleRequest
	*/
	DeleteRule(ctx context.Context, spaceId string) ApiDeleteRuleRequest

	// DeleteRuleExecute executes the request
	//  @return RuleResponse
	DeleteRuleExecute(r ApiDeleteRuleRequest) (*RuleResponse, *http.Response, error)

	/*
		PatchRule Patch a detection rule

		Update specific fields of an existing detection rule using the `rule_id` or `id` field.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param spaceId
		@return ApiPatchRuleRequest
	*/
	PatchRule(ctx context.Context, spaceId string) ApiPatchRuleRequest

	// PatchRuleExecute executes the request
	//  @return RuleResponse
	PatchRuleExecute(r ApiPatchRuleRequest) (*RuleResponse, *http.Response, error)

	/*
		ReadRule Retrieve a detection rule

		Retrieve a detection rule using the `rule_id` or `id` field.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param spaceId
		@return ApiReadRuleRequest
	*/
	ReadRule(ctx context.Context, spaceId string) ApiReadRuleRequest

	// ReadRuleExecute executes the request
	//  @return RuleResponse
	ReadRuleExecute(r ApiReadRuleRequest) (*RuleResponse, *http.Response, error)

	/*
		ReadTags List all detection rule tags

		List all unique tags from all detection rules.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiReadTagsRequest
	*/
	ReadTags(ctx context.Context) ApiReadTagsRequest

	// ReadTagsExecute executes the request
	//  @return []string
	ReadTagsExecute(r ApiReadTagsRequest) ([]string, *http.Response, error)

	/*
		UpdateRule Update a detection rule

		Update a detection rule using the `rule_id` or `id` field. The original rule is replaced, and all unspecified fields are deleted.
	> info
	> You cannot modify the `id` or `rule_id` values.


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param spaceId
		@return ApiUpdateRuleRequest
	*/
	UpdateRule(ctx context.Context, spaceId string) ApiUpdateRuleRequest

	// UpdateRuleExecute executes the request
	//  @return RuleResponse
	UpdateRuleExecute(r ApiUpdateRuleRequest) (*RuleResponse, *http.Response, error)
}

// SecurityDetectionsAPIService SecurityDetectionsAPI service
type SecurityDetectionsAPIService service

type ApiBulkPatchRulesRequest struct {
	ctx               context.Context
	ApiService        SecurityDetectionsAPI
	kbnXsrf           *string
	rulePatchProps    *[]RulePatchProps
	elasticApiVersion *string
}

// Cross-site request forgery protection
func (r ApiBulkPatchRulesRequest) KbnXsrf(kbnXsrf string) ApiBulkPatchRulesRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

// A JSON array of rules, where each rule contains the required fields.
func (r ApiBulkPatchRulesRequest) RulePatchProps(rulePatchProps []RulePatchProps) ApiBulkPatchRulesRequest {
	r.rulePatchProps = &rulePatchProps
	return r
}

// Api version
func (r ApiBulkPatchRulesRequest) ElasticApiVersion(elasticApiVersion string) ApiBulkPatchRulesRequest {
	r.elasticApiVersion = &elasticApiVersion
	return r
}

func (r ApiBulkPatchRulesRequest) Execute() ([]BulkCrudRulesResponseInner, *http.Response, error) {
	return r.ApiService.BulkPatchRulesExecute(r)
}

/*
BulkPatchRules Patch multiple detection rules

Update specific fields of existing detection rules using the `rule_id` or `id` field.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiBulkPatchRulesRequest

Deprecated
*/
func (a *SecurityDetectionsAPIService) BulkPatchRules(ctx context.Context) ApiBulkPatchRulesRequest {
	return ApiBulkPatchRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []BulkCrudRulesResponseInner
//
// Deprecated
func (a *SecurityDetectionsAPIService) BulkPatchRulesExecute(r ApiBulkPatchRulesRequest) ([]BulkCrudRulesResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []BulkCrudRulesResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityDetectionsAPIService.BulkPatchRules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/detection_engine/rules/_bulk_action"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return localVarReturnValue, nil, reportError("kbnXsrf is required and must be specified")
	}
	if r.rulePatchProps == nil {
		return localVarReturnValue, nil, reportError("rulePatchProps is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	if r.elasticApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "elastic-api-version", r.elasticApiVersion, "")
	}
	// body params
	localVarPostBody = r.rulePatchProps
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBulkUpdateRulesRequest struct {
	ctx               context.Context
	ApiService        SecurityDetectionsAPI
	kbnXsrf           *string
	ruleUpdateProps   *[]RuleUpdateProps
	elasticApiVersion *string
}

// Cross-site request forgery protection
func (r ApiBulkUpdateRulesRequest) KbnXsrf(kbnXsrf string) ApiBulkUpdateRulesRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

// A JSON array where each element includes the &#x60;id&#x60; or &#x60;rule_id&#x60; field of the rule you want to update and the fields you want to modify.
func (r ApiBulkUpdateRulesRequest) RuleUpdateProps(ruleUpdateProps []RuleUpdateProps) ApiBulkUpdateRulesRequest {
	r.ruleUpdateProps = &ruleUpdateProps
	return r
}

// Api version
func (r ApiBulkUpdateRulesRequest) ElasticApiVersion(elasticApiVersion string) ApiBulkUpdateRulesRequest {
	r.elasticApiVersion = &elasticApiVersion
	return r
}

func (r ApiBulkUpdateRulesRequest) Execute() ([]BulkCrudRulesResponseInner, *http.Response, error) {
	return r.ApiService.BulkUpdateRulesExecute(r)
}

/*
BulkUpdateRules Update multiple detection rules

Update multiple detection rules using the `rule_id` or `id` field. The original rules are replaced, and all unspecified fields are deleted.
> info
> You cannot modify the `id` or `rule_id` values.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiBulkUpdateRulesRequest

Deprecated
*/
func (a *SecurityDetectionsAPIService) BulkUpdateRules(ctx context.Context) ApiBulkUpdateRulesRequest {
	return ApiBulkUpdateRulesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []BulkCrudRulesResponseInner
//
// Deprecated
func (a *SecurityDetectionsAPIService) BulkUpdateRulesExecute(r ApiBulkUpdateRulesRequest) ([]BulkCrudRulesResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []BulkCrudRulesResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityDetectionsAPIService.BulkUpdateRules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/detection_engine/rules/_bulk_action"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return localVarReturnValue, nil, reportError("kbnXsrf is required and must be specified")
	}
	if r.ruleUpdateProps == nil {
		return localVarReturnValue, nil, reportError("ruleUpdateProps is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	if r.elasticApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "elastic-api-version", r.elasticApiVersion, "")
	}
	// body params
	localVarPostBody = r.ruleUpdateProps
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateRuleRequest struct {
	ctx               context.Context
	ApiService        SecurityDetectionsAPI
	spaceId           string
	kbnXsrf           *string
	ruleCreateProps   *RuleCreateProps
	elasticApiVersion *string
}

// Cross-site request forgery protection
func (r ApiCreateRuleRequest) KbnXsrf(kbnXsrf string) ApiCreateRuleRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

func (r ApiCreateRuleRequest) RuleCreateProps(ruleCreateProps RuleCreateProps) ApiCreateRuleRequest {
	r.ruleCreateProps = &ruleCreateProps
	return r
}

// Api version
func (r ApiCreateRuleRequest) ElasticApiVersion(elasticApiVersion string) ApiCreateRuleRequest {
	r.elasticApiVersion = &elasticApiVersion
	return r
}

func (r ApiCreateRuleRequest) Execute() (*RuleResponse, *http.Response, error) {
	return r.ApiService.CreateRuleExecute(r)
}

/*
CreateRule Create a detection rule

Create a new detection rule.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId
	@return ApiCreateRuleRequest
*/
func (a *SecurityDetectionsAPIService) CreateRule(ctx context.Context, spaceId string) ApiCreateRuleRequest {
	return ApiCreateRuleRequest{
		ApiService: a,
		ctx:        ctx,
		spaceId:    spaceId,
	}
}

// Execute executes the request
//
//	@return RuleResponse
func (a *SecurityDetectionsAPIService) CreateRuleExecute(r ApiCreateRuleRequest) (*RuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RuleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityDetectionsAPIService.CreateRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/detection_engine/rules"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return localVarReturnValue, nil, reportError("kbnXsrf is required and must be specified")
	}
	if r.ruleCreateProps == nil {
		return localVarReturnValue, nil, reportError("ruleCreateProps is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	if r.elasticApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "elastic-api-version", r.elasticApiVersion, "")
	}
	// body params
	localVarPostBody = r.ruleCreateProps
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteRuleRequest struct {
	ctx               context.Context
	ApiService        SecurityDetectionsAPI
	spaceId           string
	kbnXsrf           *string
	id                *string
	ruleId            *string
	elasticApiVersion *string
}

// Cross-site request forgery protection
func (r ApiDeleteRuleRequest) KbnXsrf(kbnXsrf string) ApiDeleteRuleRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

// The rule&#39;s &#x60;id&#x60; value.
func (r ApiDeleteRuleRequest) Id(id string) ApiDeleteRuleRequest {
	r.id = &id
	return r
}

// The rule&#39;s &#x60;rule_id&#x60; value.
func (r ApiDeleteRuleRequest) RuleId(ruleId string) ApiDeleteRuleRequest {
	r.ruleId = &ruleId
	return r
}

// Api version
func (r ApiDeleteRuleRequest) ElasticApiVersion(elasticApiVersion string) ApiDeleteRuleRequest {
	r.elasticApiVersion = &elasticApiVersion
	return r
}

func (r ApiDeleteRuleRequest) Execute() (*RuleResponse, *http.Response, error) {
	return r.ApiService.DeleteRuleExecute(r)
}

/*
DeleteRule Delete a detection rule

Delete a detection rule using the `rule_id` or `id` field.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId
	@return ApiDeleteRuleRequest
*/
func (a *SecurityDetectionsAPIService) DeleteRule(ctx context.Context, spaceId string) ApiDeleteRuleRequest {
	return ApiDeleteRuleRequest{
		ApiService: a,
		ctx:        ctx,
		spaceId:    spaceId,
	}
}

// Execute executes the request
//
//	@return RuleResponse
func (a *SecurityDetectionsAPIService) DeleteRuleExecute(r ApiDeleteRuleRequest) (*RuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RuleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityDetectionsAPIService.DeleteRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/detection_engine/rules"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return localVarReturnValue, nil, reportError("kbnXsrf is required and must be specified")
	}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.ruleId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id", r.ruleId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	if r.elasticApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "elastic-api-version", r.elasticApiVersion, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchRuleRequest struct {
	ctx               context.Context
	ApiService        SecurityDetectionsAPI
	spaceId           string
	kbnXsrf           *string
	rulePatchProps    *RulePatchProps
	elasticApiVersion *string
}

// Cross-site request forgery protection
func (r ApiPatchRuleRequest) KbnXsrf(kbnXsrf string) ApiPatchRuleRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

func (r ApiPatchRuleRequest) RulePatchProps(rulePatchProps RulePatchProps) ApiPatchRuleRequest {
	r.rulePatchProps = &rulePatchProps
	return r
}

// Api version
func (r ApiPatchRuleRequest) ElasticApiVersion(elasticApiVersion string) ApiPatchRuleRequest {
	r.elasticApiVersion = &elasticApiVersion
	return r
}

func (r ApiPatchRuleRequest) Execute() (*RuleResponse, *http.Response, error) {
	return r.ApiService.PatchRuleExecute(r)
}

/*
PatchRule Patch a detection rule

Update specific fields of an existing detection rule using the `rule_id` or `id` field.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId
	@return ApiPatchRuleRequest
*/
func (a *SecurityDetectionsAPIService) PatchRule(ctx context.Context, spaceId string) ApiPatchRuleRequest {
	return ApiPatchRuleRequest{
		ApiService: a,
		ctx:        ctx,
		spaceId:    spaceId,
	}
}

// Execute executes the request
//
//	@return RuleResponse
func (a *SecurityDetectionsAPIService) PatchRuleExecute(r ApiPatchRuleRequest) (*RuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RuleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityDetectionsAPIService.PatchRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/detection_engine/rules"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return localVarReturnValue, nil, reportError("kbnXsrf is required and must be specified")
	}
	if r.rulePatchProps == nil {
		return localVarReturnValue, nil, reportError("rulePatchProps is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	if r.elasticApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "elastic-api-version", r.elasticApiVersion, "")
	}
	// body params
	localVarPostBody = r.rulePatchProps
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadRuleRequest struct {
	ctx               context.Context
	ApiService        SecurityDetectionsAPI
	spaceId           string
	kbnXsrf           *string
	id                *string
	ruleId            *string
	elasticApiVersion *string
}

// Cross-site request forgery protection
func (r ApiReadRuleRequest) KbnXsrf(kbnXsrf string) ApiReadRuleRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

// The rule&#39;s &#x60;id&#x60; value.
func (r ApiReadRuleRequest) Id(id string) ApiReadRuleRequest {
	r.id = &id
	return r
}

// The rule&#39;s &#x60;rule_id&#x60; value.
func (r ApiReadRuleRequest) RuleId(ruleId string) ApiReadRuleRequest {
	r.ruleId = &ruleId
	return r
}

// Api version
func (r ApiReadRuleRequest) ElasticApiVersion(elasticApiVersion string) ApiReadRuleRequest {
	r.elasticApiVersion = &elasticApiVersion
	return r
}

func (r ApiReadRuleRequest) Execute() (*RuleResponse, *http.Response, error) {
	return r.ApiService.ReadRuleExecute(r)
}

/*
ReadRule Retrieve a detection rule

Retrieve a detection rule using the `rule_id` or `id` field.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId
	@return ApiReadRuleRequest
*/
func (a *SecurityDetectionsAPIService) ReadRule(ctx context.Context, spaceId string) ApiReadRuleRequest {
	return ApiReadRuleRequest{
		ApiService: a,
		ctx:        ctx,
		spaceId:    spaceId,
	}
}

// Execute executes the request
//
//	@return RuleResponse
func (a *SecurityDetectionsAPIService) ReadRuleExecute(r ApiReadRuleRequest) (*RuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RuleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityDetectionsAPIService.ReadRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/detection_engine/rules"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return localVarReturnValue, nil, reportError("kbnXsrf is required and must be specified")
	}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.ruleId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id", r.ruleId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	if r.elasticApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "elastic-api-version", r.elasticApiVersion, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadTagsRequest struct {
	ctx               context.Context
	ApiService        SecurityDetectionsAPI
	kbnXsrf           *string
	elasticApiVersion *string
}

// Cross-site request forgery protection
func (r ApiReadTagsRequest) KbnXsrf(kbnXsrf string) ApiReadTagsRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

// Api version
func (r ApiReadTagsRequest) ElasticApiVersion(elasticApiVersion string) ApiReadTagsRequest {
	r.elasticApiVersion = &elasticApiVersion
	return r
}

func (r ApiReadTagsRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.ReadTagsExecute(r)
}

/*
ReadTags List all detection rule tags

List all unique tags from all detection rules.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiReadTagsRequest
*/
func (a *SecurityDetectionsAPIService) ReadTags(ctx context.Context) ApiReadTagsRequest {
	return ApiReadTagsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []string
func (a *SecurityDetectionsAPIService) ReadTagsExecute(r ApiReadTagsRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityDetectionsAPIService.ReadTags")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/detection_engine/rules/_bulk_action"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return localVarReturnValue, nil, reportError("kbnXsrf is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	if r.elasticApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "elastic-api-version", r.elasticApiVersion, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateRuleRequest struct {
	ctx               context.Context
	ApiService        SecurityDetectionsAPI
	spaceId           string
	kbnXsrf           *string
	ruleUpdateProps   *RuleUpdateProps
	elasticApiVersion *string
}

// Cross-site request forgery protection
func (r ApiUpdateRuleRequest) KbnXsrf(kbnXsrf string) ApiUpdateRuleRequest {
	r.kbnXsrf = &kbnXsrf
	return r
}

func (r ApiUpdateRuleRequest) RuleUpdateProps(ruleUpdateProps RuleUpdateProps) ApiUpdateRuleRequest {
	r.ruleUpdateProps = &ruleUpdateProps
	return r
}

// Api version
func (r ApiUpdateRuleRequest) ElasticApiVersion(elasticApiVersion string) ApiUpdateRuleRequest {
	r.elasticApiVersion = &elasticApiVersion
	return r
}

func (r ApiUpdateRuleRequest) Execute() (*RuleResponse, *http.Response, error) {
	return r.ApiService.UpdateRuleExecute(r)
}

/*
UpdateRule Update a detection rule

Update a detection rule using the `rule_id` or `id` field. The original rule is replaced, and all unspecified fields are deleted.
> info
> You cannot modify the `id` or `rule_id` values.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param spaceId
	@return ApiUpdateRuleRequest
*/
func (a *SecurityDetectionsAPIService) UpdateRule(ctx context.Context, spaceId string) ApiUpdateRuleRequest {
	return ApiUpdateRuleRequest{
		ApiService: a,
		ctx:        ctx,
		spaceId:    spaceId,
	}
}

// Execute executes the request
//
//	@return RuleResponse
func (a *SecurityDetectionsAPIService) UpdateRuleExecute(r ApiUpdateRuleRequest) (*RuleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RuleResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityDetectionsAPIService.UpdateRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/s/{spaceId}/api/detection_engine/rules"
	localVarPath = strings.Replace(localVarPath, "{"+"spaceId"+"}", url.PathEscape(parameterValueToString(r.spaceId, "spaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kbnXsrf == nil {
		return localVarReturnValue, nil, reportError("kbnXsrf is required and must be specified")
	}
	if r.ruleUpdateProps == nil {
		return localVarReturnValue, nil, reportError("ruleUpdateProps is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "kbn-xsrf", r.kbnXsrf, "")
	if r.elasticApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "elastic-api-version", r.elasticApiVersion, "")
	}
	// body params
	localVarPostBody = r.ruleUpdateProps
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
