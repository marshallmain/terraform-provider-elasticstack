/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
)

// checks if the RequiredField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequiredField{}

// RequiredField Describes an Elasticsearch field that is needed for the rule to function.  Almost all types of Security rules check source event documents for a match to some kind of query or filter. If a document has certain field with certain values, then it's a match and the rule will generate an alert.  Required field is an event field that must be present in the source indices of a given rule.  @example const standardEcsField: RequiredField = {   name: 'event.action',   type: 'keyword',   ecs: true, };  @example const nonEcsField: RequiredField = {   name: 'winlog.event_data.AttributeLDAPDisplayName',   type: 'keyword',   ecs: false, };
type RequiredField struct {
	// Whether the field is an ECS field
	Ecs bool `json:"ecs"`
	// A string that is not empty and does not contain only whitespace
	Name string `json:"name"`
	// A string that is not empty and does not contain only whitespace
	Type string `json:"type"`
}

// NewRequiredField instantiates a new RequiredField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequiredField(ecs bool, name string, type_ string) *RequiredField {
	this := RequiredField{}
	this.Ecs = ecs
	this.Name = name
	this.Type = type_
	return &this
}

// NewRequiredFieldWithDefaults instantiates a new RequiredField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequiredFieldWithDefaults() *RequiredField {
	this := RequiredField{}
	return &this
}

// GetEcs returns the Ecs field value
func (o *RequiredField) GetEcs() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Ecs
}

// GetEcsOk returns a tuple with the Ecs field value
// and a boolean to check if the value has been set.
func (o *RequiredField) GetEcsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ecs, true
}

// SetEcs sets field value
func (o *RequiredField) SetEcs(v bool) {
	o.Ecs = v
}

// GetName returns the Name field value
func (o *RequiredField) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RequiredField) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RequiredField) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *RequiredField) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RequiredField) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RequiredField) SetType(v string) {
	o.Type = v
}

func (o RequiredField) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequiredField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ecs"] = o.Ecs
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableRequiredField struct {
	value *RequiredField
	isSet bool
}

func (v NullableRequiredField) Get() *RequiredField {
	return v.value
}

func (v *NullableRequiredField) Set(val *RequiredField) {
	v.value = val
	v.isSet = true
}

func (v NullableRequiredField) IsSet() bool {
	return v.isSet
}

func (v *NullableRequiredField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequiredField(val *RequiredField) *NullableRequiredField {
	return &NullableRequiredField{value: val, isSet: true}
}

func (v NullableRequiredField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequiredField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
