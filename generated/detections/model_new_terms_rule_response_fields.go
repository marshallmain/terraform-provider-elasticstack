/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
)

// checks if the NewTermsRuleResponseFields type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewTermsRuleResponseFields{}

// NewTermsRuleResponseFields struct for NewTermsRuleResponseFields
type NewTermsRuleResponseFields struct {
	// A string that is not empty and does not contain only whitespace
	HistoryWindowStart string   `json:"history_window_start"`
	NewTermsFields     []string `json:"new_terms_fields"`
	Query              string   `json:"query"`
	// Rule type
	Type             string            `json:"type"`
	AlertSuppression *AlertSuppression `json:"alert_suppression,omitempty"`
	DataViewId       *string           `json:"data_view_id,omitempty"`
	Filters          []interface{}     `json:"filters,omitempty"`
	Index            []string          `json:"index,omitempty"`
	ResponseActions  []ResponseAction  `json:"response_actions,omitempty"`
	Language         KqlQueryLanguage  `json:"language"`
}

// NewNewTermsRuleResponseFields instantiates a new NewTermsRuleResponseFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewTermsRuleResponseFields(historyWindowStart string, newTermsFields []string, query string, type_ string, language KqlQueryLanguage) *NewTermsRuleResponseFields {
	this := NewTermsRuleResponseFields{}
	this.HistoryWindowStart = historyWindowStart
	this.NewTermsFields = newTermsFields
	this.Query = query
	this.Type = type_
	this.Language = language
	return &this
}

// NewNewTermsRuleResponseFieldsWithDefaults instantiates a new NewTermsRuleResponseFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewTermsRuleResponseFieldsWithDefaults() *NewTermsRuleResponseFields {
	this := NewTermsRuleResponseFields{}
	return &this
}

// GetHistoryWindowStart returns the HistoryWindowStart field value
func (o *NewTermsRuleResponseFields) GetHistoryWindowStart() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HistoryWindowStart
}

// GetHistoryWindowStartOk returns a tuple with the HistoryWindowStart field value
// and a boolean to check if the value has been set.
func (o *NewTermsRuleResponseFields) GetHistoryWindowStartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HistoryWindowStart, true
}

// SetHistoryWindowStart sets field value
func (o *NewTermsRuleResponseFields) SetHistoryWindowStart(v string) {
	o.HistoryWindowStart = v
}

// GetNewTermsFields returns the NewTermsFields field value
func (o *NewTermsRuleResponseFields) GetNewTermsFields() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.NewTermsFields
}

// GetNewTermsFieldsOk returns a tuple with the NewTermsFields field value
// and a boolean to check if the value has been set.
func (o *NewTermsRuleResponseFields) GetNewTermsFieldsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewTermsFields, true
}

// SetNewTermsFields sets field value
func (o *NewTermsRuleResponseFields) SetNewTermsFields(v []string) {
	o.NewTermsFields = v
}

// GetQuery returns the Query field value
func (o *NewTermsRuleResponseFields) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *NewTermsRuleResponseFields) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *NewTermsRuleResponseFields) SetQuery(v string) {
	o.Query = v
}

// GetType returns the Type field value
func (o *NewTermsRuleResponseFields) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NewTermsRuleResponseFields) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NewTermsRuleResponseFields) SetType(v string) {
	o.Type = v
}

// GetAlertSuppression returns the AlertSuppression field value if set, zero value otherwise.
func (o *NewTermsRuleResponseFields) GetAlertSuppression() AlertSuppression {
	if o == nil || IsNil(o.AlertSuppression) {
		var ret AlertSuppression
		return ret
	}
	return *o.AlertSuppression
}

// GetAlertSuppressionOk returns a tuple with the AlertSuppression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewTermsRuleResponseFields) GetAlertSuppressionOk() (*AlertSuppression, bool) {
	if o == nil || IsNil(o.AlertSuppression) {
		return nil, false
	}
	return o.AlertSuppression, true
}

// HasAlertSuppression returns a boolean if a field has been set.
func (o *NewTermsRuleResponseFields) HasAlertSuppression() bool {
	if o != nil && !IsNil(o.AlertSuppression) {
		return true
	}

	return false
}

// SetAlertSuppression gets a reference to the given AlertSuppression and assigns it to the AlertSuppression field.
func (o *NewTermsRuleResponseFields) SetAlertSuppression(v AlertSuppression) {
	o.AlertSuppression = &v
}

// GetDataViewId returns the DataViewId field value if set, zero value otherwise.
func (o *NewTermsRuleResponseFields) GetDataViewId() string {
	if o == nil || IsNil(o.DataViewId) {
		var ret string
		return ret
	}
	return *o.DataViewId
}

// GetDataViewIdOk returns a tuple with the DataViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewTermsRuleResponseFields) GetDataViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.DataViewId) {
		return nil, false
	}
	return o.DataViewId, true
}

// HasDataViewId returns a boolean if a field has been set.
func (o *NewTermsRuleResponseFields) HasDataViewId() bool {
	if o != nil && !IsNil(o.DataViewId) {
		return true
	}

	return false
}

// SetDataViewId gets a reference to the given string and assigns it to the DataViewId field.
func (o *NewTermsRuleResponseFields) SetDataViewId(v string) {
	o.DataViewId = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *NewTermsRuleResponseFields) GetFilters() []interface{} {
	if o == nil || IsNil(o.Filters) {
		var ret []interface{}
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewTermsRuleResponseFields) GetFiltersOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *NewTermsRuleResponseFields) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []interface{} and assigns it to the Filters field.
func (o *NewTermsRuleResponseFields) SetFilters(v []interface{}) {
	o.Filters = v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *NewTermsRuleResponseFields) GetIndex() []string {
	if o == nil || IsNil(o.Index) {
		var ret []string
		return ret
	}
	return o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewTermsRuleResponseFields) GetIndexOk() ([]string, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *NewTermsRuleResponseFields) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given []string and assigns it to the Index field.
func (o *NewTermsRuleResponseFields) SetIndex(v []string) {
	o.Index = v
}

// GetResponseActions returns the ResponseActions field value if set, zero value otherwise.
func (o *NewTermsRuleResponseFields) GetResponseActions() []ResponseAction {
	if o == nil || IsNil(o.ResponseActions) {
		var ret []ResponseAction
		return ret
	}
	return o.ResponseActions
}

// GetResponseActionsOk returns a tuple with the ResponseActions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewTermsRuleResponseFields) GetResponseActionsOk() ([]ResponseAction, bool) {
	if o == nil || IsNil(o.ResponseActions) {
		return nil, false
	}
	return o.ResponseActions, true
}

// HasResponseActions returns a boolean if a field has been set.
func (o *NewTermsRuleResponseFields) HasResponseActions() bool {
	if o != nil && !IsNil(o.ResponseActions) {
		return true
	}

	return false
}

// SetResponseActions gets a reference to the given []ResponseAction and assigns it to the ResponseActions field.
func (o *NewTermsRuleResponseFields) SetResponseActions(v []ResponseAction) {
	o.ResponseActions = v
}

// GetLanguage returns the Language field value
func (o *NewTermsRuleResponseFields) GetLanguage() KqlQueryLanguage {
	if o == nil {
		var ret KqlQueryLanguage
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *NewTermsRuleResponseFields) GetLanguageOk() (*KqlQueryLanguage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *NewTermsRuleResponseFields) SetLanguage(v KqlQueryLanguage) {
	o.Language = v
}

func (o NewTermsRuleResponseFields) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewTermsRuleResponseFields) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["history_window_start"] = o.HistoryWindowStart
	toSerialize["new_terms_fields"] = o.NewTermsFields
	toSerialize["query"] = o.Query
	toSerialize["type"] = o.Type
	if !IsNil(o.AlertSuppression) {
		toSerialize["alert_suppression"] = o.AlertSuppression
	}
	if !IsNil(o.DataViewId) {
		toSerialize["data_view_id"] = o.DataViewId
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.ResponseActions) {
		toSerialize["response_actions"] = o.ResponseActions
	}
	toSerialize["language"] = o.Language
	return toSerialize, nil
}

type NullableNewTermsRuleResponseFields struct {
	value *NewTermsRuleResponseFields
	isSet bool
}

func (v NullableNewTermsRuleResponseFields) Get() *NewTermsRuleResponseFields {
	return v.value
}

func (v *NullableNewTermsRuleResponseFields) Set(val *NewTermsRuleResponseFields) {
	v.value = val
	v.isSet = true
}

func (v NullableNewTermsRuleResponseFields) IsSet() bool {
	return v.isSet
}

func (v *NullableNewTermsRuleResponseFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewTermsRuleResponseFields(val *NewTermsRuleResponseFields) *NullableNewTermsRuleResponseFields {
	return &NullableNewTermsRuleResponseFields{value: val, isSet: true}
}

func (v NullableNewTermsRuleResponseFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewTermsRuleResponseFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
