/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
	"fmt"
)

// SavedObjectResolveAliasPurpose the model 'SavedObjectResolveAliasPurpose'
type SavedObjectResolveAliasPurpose string

// List of SavedObjectResolveAliasPurpose
const (
	SAVED_OBJECT_CONVERSION SavedObjectResolveAliasPurpose = "savedObjectConversion"
	SAVED_OBJECT_IMPORT     SavedObjectResolveAliasPurpose = "savedObjectImport"
)

// All allowed values of SavedObjectResolveAliasPurpose enum
var AllowedSavedObjectResolveAliasPurposeEnumValues = []SavedObjectResolveAliasPurpose{
	"savedObjectConversion",
	"savedObjectImport",
}

func (v *SavedObjectResolveAliasPurpose) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SavedObjectResolveAliasPurpose(value)
	for _, existing := range AllowedSavedObjectResolveAliasPurposeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SavedObjectResolveAliasPurpose", value)
}

// NewSavedObjectResolveAliasPurposeFromValue returns a pointer to a valid SavedObjectResolveAliasPurpose
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSavedObjectResolveAliasPurposeFromValue(v string) (*SavedObjectResolveAliasPurpose, error) {
	ev := SavedObjectResolveAliasPurpose(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SavedObjectResolveAliasPurpose: valid values are %v", v, AllowedSavedObjectResolveAliasPurposeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SavedObjectResolveAliasPurpose) IsValid() bool {
	for _, existing := range AllowedSavedObjectResolveAliasPurposeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SavedObjectResolveAliasPurpose value
func (v SavedObjectResolveAliasPurpose) Ptr() *SavedObjectResolveAliasPurpose {
	return &v
}

type NullableSavedObjectResolveAliasPurpose struct {
	value *SavedObjectResolveAliasPurpose
	isSet bool
}

func (v NullableSavedObjectResolveAliasPurpose) Get() *SavedObjectResolveAliasPurpose {
	return v.value
}

func (v *NullableSavedObjectResolveAliasPurpose) Set(val *SavedObjectResolveAliasPurpose) {
	v.value = val
	v.isSet = true
}

func (v NullableSavedObjectResolveAliasPurpose) IsSet() bool {
	return v.isSet
}

func (v *NullableSavedObjectResolveAliasPurpose) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSavedObjectResolveAliasPurpose(val *SavedObjectResolveAliasPurpose) *NullableSavedObjectResolveAliasPurpose {
	return &NullableSavedObjectResolveAliasPurpose{value: val, isSet: true}
}

func (v NullableSavedObjectResolveAliasPurpose) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSavedObjectResolveAliasPurpose) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
