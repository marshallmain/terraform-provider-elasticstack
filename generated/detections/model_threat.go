/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
)

// checks if the Threat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Threat{}

// Threat struct for Threat
type Threat struct {
	// Relevant attack framework
	Framework string       `json:"framework"`
	Tactic    ThreatTactic `json:"tactic"`
	// Array containing information on the attack techniques (optional)
	Technique []ThreatTechnique `json:"technique,omitempty"`
}

// NewThreat instantiates a new Threat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreat(framework string, tactic ThreatTactic) *Threat {
	this := Threat{}
	this.Framework = framework
	this.Tactic = tactic
	return &this
}

// NewThreatWithDefaults instantiates a new Threat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreatWithDefaults() *Threat {
	this := Threat{}
	return &this
}

// GetFramework returns the Framework field value
func (o *Threat) GetFramework() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Framework
}

// GetFrameworkOk returns a tuple with the Framework field value
// and a boolean to check if the value has been set.
func (o *Threat) GetFrameworkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Framework, true
}

// SetFramework sets field value
func (o *Threat) SetFramework(v string) {
	o.Framework = v
}

// GetTactic returns the Tactic field value
func (o *Threat) GetTactic() ThreatTactic {
	if o == nil {
		var ret ThreatTactic
		return ret
	}

	return o.Tactic
}

// GetTacticOk returns a tuple with the Tactic field value
// and a boolean to check if the value has been set.
func (o *Threat) GetTacticOk() (*ThreatTactic, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tactic, true
}

// SetTactic sets field value
func (o *Threat) SetTactic(v ThreatTactic) {
	o.Tactic = v
}

// GetTechnique returns the Technique field value if set, zero value otherwise.
func (o *Threat) GetTechnique() []ThreatTechnique {
	if o == nil || IsNil(o.Technique) {
		var ret []ThreatTechnique
		return ret
	}
	return o.Technique
}

// GetTechniqueOk returns a tuple with the Technique field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Threat) GetTechniqueOk() ([]ThreatTechnique, bool) {
	if o == nil || IsNil(o.Technique) {
		return nil, false
	}
	return o.Technique, true
}

// HasTechnique returns a boolean if a field has been set.
func (o *Threat) HasTechnique() bool {
	if o != nil && !IsNil(o.Technique) {
		return true
	}

	return false
}

// SetTechnique gets a reference to the given []ThreatTechnique and assigns it to the Technique field.
func (o *Threat) SetTechnique(v []ThreatTechnique) {
	o.Technique = v
}

func (o Threat) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Threat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["framework"] = o.Framework
	toSerialize["tactic"] = o.Tactic
	if !IsNil(o.Technique) {
		toSerialize["technique"] = o.Technique
	}
	return toSerialize, nil
}

type NullableThreat struct {
	value *Threat
	isSet bool
}

func (v NullableThreat) Get() *Threat {
	return v.value
}

func (v *NullableThreat) Set(val *Threat) {
	v.value = val
	v.isSet = true
}

func (v NullableThreat) IsSet() bool {
	return v.isSet
}

func (v *NullableThreat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreat(val *Threat) *NullableThreat {
	return &NullableThreat{value: val, isSet: true}
}

func (v NullableThreat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
