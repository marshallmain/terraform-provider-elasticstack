/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
)

// checks if the InvestigationFields type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvestigationFields{}

// InvestigationFields Schema for fields relating to investigation fields. These are user defined fields we use to highlight in various features in the UI such as alert details flyout and exceptions auto-population from alert. Added in PR #163235 Right now we only have a single field but anticipate adding more related fields to store various configuration states such as `override` - where a user might say if they want only these fields to display, or if they want these fields + the fields we select. When expanding this field, it may look something like: ```typescript const investigationFields = z.object({   field_names: NonEmptyArray(NonEmptyString),   override: z.boolean().optional(), }); ```
type InvestigationFields struct {
	FieldNames []string `json:"field_names"`
}

// NewInvestigationFields instantiates a new InvestigationFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvestigationFields(fieldNames []string) *InvestigationFields {
	this := InvestigationFields{}
	this.FieldNames = fieldNames
	return &this
}

// NewInvestigationFieldsWithDefaults instantiates a new InvestigationFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvestigationFieldsWithDefaults() *InvestigationFields {
	this := InvestigationFields{}
	return &this
}

// GetFieldNames returns the FieldNames field value
func (o *InvestigationFields) GetFieldNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FieldNames
}

// GetFieldNamesOk returns a tuple with the FieldNames field value
// and a boolean to check if the value has been set.
func (o *InvestigationFields) GetFieldNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FieldNames, true
}

// SetFieldNames sets field value
func (o *InvestigationFields) SetFieldNames(v []string) {
	o.FieldNames = v
}

func (o InvestigationFields) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvestigationFields) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field_names"] = o.FieldNames
	return toSerialize, nil
}

type NullableInvestigationFields struct {
	value *InvestigationFields
	isSet bool
}

func (v NullableInvestigationFields) Get() *InvestigationFields {
	return v.value
}

func (v *NullableInvestigationFields) Set(val *InvestigationFields) {
	v.value = val
	v.isSet = true
}

func (v NullableInvestigationFields) IsSet() bool {
	return v.isSet
}

func (v *NullableInvestigationFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvestigationFields(val *InvestigationFields) *NullableInvestigationFields {
	return &NullableInvestigationFields{value: val, isSet: true}
}

func (v NullableInvestigationFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvestigationFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
