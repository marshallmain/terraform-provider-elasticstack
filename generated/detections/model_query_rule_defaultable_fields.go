/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
)

// checks if the QueryRuleDefaultableFields type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryRuleDefaultableFields{}

// QueryRuleDefaultableFields struct for QueryRuleDefaultableFields
type QueryRuleDefaultableFields struct {
	Language *KqlQueryLanguage `json:"language,omitempty"`
	Query    *string           `json:"query,omitempty"`
}

// NewQueryRuleDefaultableFields instantiates a new QueryRuleDefaultableFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryRuleDefaultableFields() *QueryRuleDefaultableFields {
	this := QueryRuleDefaultableFields{}
	return &this
}

// NewQueryRuleDefaultableFieldsWithDefaults instantiates a new QueryRuleDefaultableFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryRuleDefaultableFieldsWithDefaults() *QueryRuleDefaultableFields {
	this := QueryRuleDefaultableFields{}
	return &this
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *QueryRuleDefaultableFields) GetLanguage() KqlQueryLanguage {
	if o == nil || IsNil(o.Language) {
		var ret KqlQueryLanguage
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryRuleDefaultableFields) GetLanguageOk() (*KqlQueryLanguage, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *QueryRuleDefaultableFields) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given KqlQueryLanguage and assigns it to the Language field.
func (o *QueryRuleDefaultableFields) SetLanguage(v KqlQueryLanguage) {
	o.Language = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *QueryRuleDefaultableFields) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryRuleDefaultableFields) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *QueryRuleDefaultableFields) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *QueryRuleDefaultableFields) SetQuery(v string) {
	o.Query = &v
}

func (o QueryRuleDefaultableFields) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryRuleDefaultableFields) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	return toSerialize, nil
}

type NullableQueryRuleDefaultableFields struct {
	value *QueryRuleDefaultableFields
	isSet bool
}

func (v NullableQueryRuleDefaultableFields) Get() *QueryRuleDefaultableFields {
	return v.value
}

func (v *NullableQueryRuleDefaultableFields) Set(val *QueryRuleDefaultableFields) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryRuleDefaultableFields) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryRuleDefaultableFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryRuleDefaultableFields(val *QueryRuleDefaultableFields) *NullableQueryRuleDefaultableFields {
	return &NullableQueryRuleDefaultableFields{value: val, isSet: true}
}

func (v NullableQueryRuleDefaultableFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryRuleDefaultableFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
