/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
)

// checks if the RuleExceptionList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleExceptionList{}

// RuleExceptionList struct for RuleExceptionList
type RuleExceptionList struct {
	// A string that is not empty and does not contain only whitespace
	Id string `json:"id"`
	// A string that is not empty and does not contain only whitespace
	ListId string `json:"list_id"`
	// Determines the exceptions validity in rule's Kibana space
	NamespaceType string            `json:"namespace_type"`
	Type          ExceptionListType `json:"type"`
}

// NewRuleExceptionList instantiates a new RuleExceptionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleExceptionList(id string, listId string, namespaceType string, type_ ExceptionListType) *RuleExceptionList {
	this := RuleExceptionList{}
	this.Id = id
	this.ListId = listId
	this.NamespaceType = namespaceType
	this.Type = type_
	return &this
}

// NewRuleExceptionListWithDefaults instantiates a new RuleExceptionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleExceptionListWithDefaults() *RuleExceptionList {
	this := RuleExceptionList{}
	return &this
}

// GetId returns the Id field value
func (o *RuleExceptionList) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RuleExceptionList) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RuleExceptionList) SetId(v string) {
	o.Id = v
}

// GetListId returns the ListId field value
func (o *RuleExceptionList) GetListId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ListId
}

// GetListIdOk returns a tuple with the ListId field value
// and a boolean to check if the value has been set.
func (o *RuleExceptionList) GetListIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ListId, true
}

// SetListId sets field value
func (o *RuleExceptionList) SetListId(v string) {
	o.ListId = v
}

// GetNamespaceType returns the NamespaceType field value
func (o *RuleExceptionList) GetNamespaceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NamespaceType
}

// GetNamespaceTypeOk returns a tuple with the NamespaceType field value
// and a boolean to check if the value has been set.
func (o *RuleExceptionList) GetNamespaceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NamespaceType, true
}

// SetNamespaceType sets field value
func (o *RuleExceptionList) SetNamespaceType(v string) {
	o.NamespaceType = v
}

// GetType returns the Type field value
func (o *RuleExceptionList) GetType() ExceptionListType {
	if o == nil {
		var ret ExceptionListType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RuleExceptionList) GetTypeOk() (*ExceptionListType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RuleExceptionList) SetType(v ExceptionListType) {
	o.Type = v
}

func (o RuleExceptionList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleExceptionList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["list_id"] = o.ListId
	toSerialize["namespace_type"] = o.NamespaceType
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableRuleExceptionList struct {
	value *RuleExceptionList
	isSet bool
}

func (v NullableRuleExceptionList) Get() *RuleExceptionList {
	return v.value
}

func (v *NullableRuleExceptionList) Set(val *RuleExceptionList) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleExceptionList) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleExceptionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleExceptionList(val *RuleExceptionList) *NullableRuleExceptionList {
	return &NullableRuleExceptionList{value: val, isSet: true}
}

func (v NullableRuleExceptionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleExceptionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
