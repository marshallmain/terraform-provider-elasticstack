/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
	"fmt"
)

// RuleActionNotifyWhen The condition for throttling the notification: `onActionGroupChange`, `onActiveAlert`,  or `onThrottleInterval`
type RuleActionNotifyWhen string

// List of RuleActionNotifyWhen
const (
	ON_ACTIVE_ALERT        RuleActionNotifyWhen = "onActiveAlert"
	ON_THROTTLE_INTERVAL   RuleActionNotifyWhen = "onThrottleInterval"
	ON_ACTION_GROUP_CHANGE RuleActionNotifyWhen = "onActionGroupChange"
)

// All allowed values of RuleActionNotifyWhen enum
var AllowedRuleActionNotifyWhenEnumValues = []RuleActionNotifyWhen{
	"onActiveAlert",
	"onThrottleInterval",
	"onActionGroupChange",
}

func (v *RuleActionNotifyWhen) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RuleActionNotifyWhen(value)
	for _, existing := range AllowedRuleActionNotifyWhenEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RuleActionNotifyWhen", value)
}

// NewRuleActionNotifyWhenFromValue returns a pointer to a valid RuleActionNotifyWhen
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRuleActionNotifyWhenFromValue(v string) (*RuleActionNotifyWhen, error) {
	ev := RuleActionNotifyWhen(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RuleActionNotifyWhen: valid values are %v", v, AllowedRuleActionNotifyWhenEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RuleActionNotifyWhen) IsValid() bool {
	for _, existing := range AllowedRuleActionNotifyWhenEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RuleActionNotifyWhen value
func (v RuleActionNotifyWhen) Ptr() *RuleActionNotifyWhen {
	return &v
}

type NullableRuleActionNotifyWhen struct {
	value *RuleActionNotifyWhen
	isSet bool
}

func (v NullableRuleActionNotifyWhen) Get() *RuleActionNotifyWhen {
	return v.value
}

func (v *NullableRuleActionNotifyWhen) Set(val *RuleActionNotifyWhen) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleActionNotifyWhen) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleActionNotifyWhen) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleActionNotifyWhen(val *RuleActionNotifyWhen) *NullableRuleActionNotifyWhen {
	return &NullableRuleActionNotifyWhen{value: val, isSet: true}
}

func (v NullableRuleActionNotifyWhen) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleActionNotifyWhen) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
