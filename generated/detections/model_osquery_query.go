/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
)

// checks if the OsqueryQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OsqueryQuery{}

// OsqueryQuery struct for OsqueryQuery
type OsqueryQuery struct {
	EcsMapping *map[string]EcsMappingValue `json:"ecs_mapping,omitempty"`
	// Query ID
	Id       string  `json:"id"`
	Platform *string `json:"platform,omitempty"`
	// Query to run
	Query    string `json:"query"`
	Removed  *bool  `json:"removed,omitempty"`
	Snapshot *bool  `json:"snapshot,omitempty"`
	// Query version
	Version *string `json:"version,omitempty"`
}

// NewOsqueryQuery instantiates a new OsqueryQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOsqueryQuery(id string, query string) *OsqueryQuery {
	this := OsqueryQuery{}
	this.Id = id
	this.Query = query
	return &this
}

// NewOsqueryQueryWithDefaults instantiates a new OsqueryQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOsqueryQueryWithDefaults() *OsqueryQuery {
	this := OsqueryQuery{}
	return &this
}

// GetEcsMapping returns the EcsMapping field value if set, zero value otherwise.
func (o *OsqueryQuery) GetEcsMapping() map[string]EcsMappingValue {
	if o == nil || IsNil(o.EcsMapping) {
		var ret map[string]EcsMappingValue
		return ret
	}
	return *o.EcsMapping
}

// GetEcsMappingOk returns a tuple with the EcsMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsqueryQuery) GetEcsMappingOk() (*map[string]EcsMappingValue, bool) {
	if o == nil || IsNil(o.EcsMapping) {
		return nil, false
	}
	return o.EcsMapping, true
}

// HasEcsMapping returns a boolean if a field has been set.
func (o *OsqueryQuery) HasEcsMapping() bool {
	if o != nil && !IsNil(o.EcsMapping) {
		return true
	}

	return false
}

// SetEcsMapping gets a reference to the given map[string]EcsMappingValue and assigns it to the EcsMapping field.
func (o *OsqueryQuery) SetEcsMapping(v map[string]EcsMappingValue) {
	o.EcsMapping = &v
}

// GetId returns the Id field value
func (o *OsqueryQuery) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OsqueryQuery) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OsqueryQuery) SetId(v string) {
	o.Id = v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *OsqueryQuery) GetPlatform() string {
	if o == nil || IsNil(o.Platform) {
		var ret string
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsqueryQuery) GetPlatformOk() (*string, bool) {
	if o == nil || IsNil(o.Platform) {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *OsqueryQuery) HasPlatform() bool {
	if o != nil && !IsNil(o.Platform) {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given string and assigns it to the Platform field.
func (o *OsqueryQuery) SetPlatform(v string) {
	o.Platform = &v
}

// GetQuery returns the Query field value
func (o *OsqueryQuery) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *OsqueryQuery) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *OsqueryQuery) SetQuery(v string) {
	o.Query = v
}

// GetRemoved returns the Removed field value if set, zero value otherwise.
func (o *OsqueryQuery) GetRemoved() bool {
	if o == nil || IsNil(o.Removed) {
		var ret bool
		return ret
	}
	return *o.Removed
}

// GetRemovedOk returns a tuple with the Removed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsqueryQuery) GetRemovedOk() (*bool, bool) {
	if o == nil || IsNil(o.Removed) {
		return nil, false
	}
	return o.Removed, true
}

// HasRemoved returns a boolean if a field has been set.
func (o *OsqueryQuery) HasRemoved() bool {
	if o != nil && !IsNil(o.Removed) {
		return true
	}

	return false
}

// SetRemoved gets a reference to the given bool and assigns it to the Removed field.
func (o *OsqueryQuery) SetRemoved(v bool) {
	o.Removed = &v
}

// GetSnapshot returns the Snapshot field value if set, zero value otherwise.
func (o *OsqueryQuery) GetSnapshot() bool {
	if o == nil || IsNil(o.Snapshot) {
		var ret bool
		return ret
	}
	return *o.Snapshot
}

// GetSnapshotOk returns a tuple with the Snapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsqueryQuery) GetSnapshotOk() (*bool, bool) {
	if o == nil || IsNil(o.Snapshot) {
		return nil, false
	}
	return o.Snapshot, true
}

// HasSnapshot returns a boolean if a field has been set.
func (o *OsqueryQuery) HasSnapshot() bool {
	if o != nil && !IsNil(o.Snapshot) {
		return true
	}

	return false
}

// SetSnapshot gets a reference to the given bool and assigns it to the Snapshot field.
func (o *OsqueryQuery) SetSnapshot(v bool) {
	o.Snapshot = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *OsqueryQuery) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsqueryQuery) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *OsqueryQuery) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *OsqueryQuery) SetVersion(v string) {
	o.Version = &v
}

func (o OsqueryQuery) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OsqueryQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EcsMapping) {
		toSerialize["ecs_mapping"] = o.EcsMapping
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Platform) {
		toSerialize["platform"] = o.Platform
	}
	toSerialize["query"] = o.Query
	if !IsNil(o.Removed) {
		toSerialize["removed"] = o.Removed
	}
	if !IsNil(o.Snapshot) {
		toSerialize["snapshot"] = o.Snapshot
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableOsqueryQuery struct {
	value *OsqueryQuery
	isSet bool
}

func (v NullableOsqueryQuery) Get() *OsqueryQuery {
	return v.value
}

func (v *NullableOsqueryQuery) Set(val *OsqueryQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableOsqueryQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableOsqueryQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOsqueryQuery(val *OsqueryQuery) *NullableOsqueryQuery {
	return &NullableOsqueryQuery{value: val, isSet: true}
}

func (v NullableOsqueryQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOsqueryQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
