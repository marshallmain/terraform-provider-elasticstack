/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
)

// checks if the OsqueryParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OsqueryParams{}

// OsqueryParams struct for OsqueryParams
type OsqueryParams struct {
	EcsMapping   *map[string]EcsMappingValue `json:"ecs_mapping,omitempty"`
	PackId       *string                     `json:"pack_id,omitempty"`
	Queries      []OsqueryQuery              `json:"queries,omitempty"`
	Query        *string                     `json:"query,omitempty"`
	SavedQueryId *string                     `json:"saved_query_id,omitempty"`
	Timeout      *float32                    `json:"timeout,omitempty"`
}

// NewOsqueryParams instantiates a new OsqueryParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOsqueryParams() *OsqueryParams {
	this := OsqueryParams{}
	return &this
}

// NewOsqueryParamsWithDefaults instantiates a new OsqueryParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOsqueryParamsWithDefaults() *OsqueryParams {
	this := OsqueryParams{}
	return &this
}

// GetEcsMapping returns the EcsMapping field value if set, zero value otherwise.
func (o *OsqueryParams) GetEcsMapping() map[string]EcsMappingValue {
	if o == nil || IsNil(o.EcsMapping) {
		var ret map[string]EcsMappingValue
		return ret
	}
	return *o.EcsMapping
}

// GetEcsMappingOk returns a tuple with the EcsMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsqueryParams) GetEcsMappingOk() (*map[string]EcsMappingValue, bool) {
	if o == nil || IsNil(o.EcsMapping) {
		return nil, false
	}
	return o.EcsMapping, true
}

// HasEcsMapping returns a boolean if a field has been set.
func (o *OsqueryParams) HasEcsMapping() bool {
	if o != nil && !IsNil(o.EcsMapping) {
		return true
	}

	return false
}

// SetEcsMapping gets a reference to the given map[string]EcsMappingValue and assigns it to the EcsMapping field.
func (o *OsqueryParams) SetEcsMapping(v map[string]EcsMappingValue) {
	o.EcsMapping = &v
}

// GetPackId returns the PackId field value if set, zero value otherwise.
func (o *OsqueryParams) GetPackId() string {
	if o == nil || IsNil(o.PackId) {
		var ret string
		return ret
	}
	return *o.PackId
}

// GetPackIdOk returns a tuple with the PackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsqueryParams) GetPackIdOk() (*string, bool) {
	if o == nil || IsNil(o.PackId) {
		return nil, false
	}
	return o.PackId, true
}

// HasPackId returns a boolean if a field has been set.
func (o *OsqueryParams) HasPackId() bool {
	if o != nil && !IsNil(o.PackId) {
		return true
	}

	return false
}

// SetPackId gets a reference to the given string and assigns it to the PackId field.
func (o *OsqueryParams) SetPackId(v string) {
	o.PackId = &v
}

// GetQueries returns the Queries field value if set, zero value otherwise.
func (o *OsqueryParams) GetQueries() []OsqueryQuery {
	if o == nil || IsNil(o.Queries) {
		var ret []OsqueryQuery
		return ret
	}
	return o.Queries
}

// GetQueriesOk returns a tuple with the Queries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsqueryParams) GetQueriesOk() ([]OsqueryQuery, bool) {
	if o == nil || IsNil(o.Queries) {
		return nil, false
	}
	return o.Queries, true
}

// HasQueries returns a boolean if a field has been set.
func (o *OsqueryParams) HasQueries() bool {
	if o != nil && !IsNil(o.Queries) {
		return true
	}

	return false
}

// SetQueries gets a reference to the given []OsqueryQuery and assigns it to the Queries field.
func (o *OsqueryParams) SetQueries(v []OsqueryQuery) {
	o.Queries = v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *OsqueryParams) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsqueryParams) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *OsqueryParams) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *OsqueryParams) SetQuery(v string) {
	o.Query = &v
}

// GetSavedQueryId returns the SavedQueryId field value if set, zero value otherwise.
func (o *OsqueryParams) GetSavedQueryId() string {
	if o == nil || IsNil(o.SavedQueryId) {
		var ret string
		return ret
	}
	return *o.SavedQueryId
}

// GetSavedQueryIdOk returns a tuple with the SavedQueryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsqueryParams) GetSavedQueryIdOk() (*string, bool) {
	if o == nil || IsNil(o.SavedQueryId) {
		return nil, false
	}
	return o.SavedQueryId, true
}

// HasSavedQueryId returns a boolean if a field has been set.
func (o *OsqueryParams) HasSavedQueryId() bool {
	if o != nil && !IsNil(o.SavedQueryId) {
		return true
	}

	return false
}

// SetSavedQueryId gets a reference to the given string and assigns it to the SavedQueryId field.
func (o *OsqueryParams) SetSavedQueryId(v string) {
	o.SavedQueryId = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *OsqueryParams) GetTimeout() float32 {
	if o == nil || IsNil(o.Timeout) {
		var ret float32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsqueryParams) GetTimeoutOk() (*float32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *OsqueryParams) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given float32 and assigns it to the Timeout field.
func (o *OsqueryParams) SetTimeout(v float32) {
	o.Timeout = &v
}

func (o OsqueryParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OsqueryParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EcsMapping) {
		toSerialize["ecs_mapping"] = o.EcsMapping
	}
	if !IsNil(o.PackId) {
		toSerialize["pack_id"] = o.PackId
	}
	if !IsNil(o.Queries) {
		toSerialize["queries"] = o.Queries
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.SavedQueryId) {
		toSerialize["saved_query_id"] = o.SavedQueryId
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	return toSerialize, nil
}

type NullableOsqueryParams struct {
	value *OsqueryParams
	isSet bool
}

func (v NullableOsqueryParams) Get() *OsqueryParams {
	return v.value
}

func (v *NullableOsqueryParams) Set(val *OsqueryParams) {
	v.value = val
	v.isSet = true
}

func (v NullableOsqueryParams) IsSet() bool {
	return v.isSet
}

func (v *NullableOsqueryParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOsqueryParams(val *OsqueryParams) *NullableOsqueryParams {
	return &NullableOsqueryParams{value: val, isSet: true}
}

func (v NullableOsqueryParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOsqueryParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
