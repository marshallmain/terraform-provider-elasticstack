/*
Security Detections (Elastic Cloud and self-hosted)

You can create rules that automatically turn events and external alerts sent to Elastic Security into detection alerts. These alerts are displayed on the Detections page.

API version: 2023-10-31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package detections

import (
	"encoding/json"
	"fmt"
)

// EndpointResponseActionParams - struct for EndpointResponseActionParams
type EndpointResponseActionParams struct {
	DefaultParams   *DefaultParams
	ProcessesParams *ProcessesParams
}

// DefaultParamsAsEndpointResponseActionParams is a convenience function that returns DefaultParams wrapped in EndpointResponseActionParams
func DefaultParamsAsEndpointResponseActionParams(v *DefaultParams) EndpointResponseActionParams {
	return EndpointResponseActionParams{
		DefaultParams: v,
	}
}

// ProcessesParamsAsEndpointResponseActionParams is a convenience function that returns ProcessesParams wrapped in EndpointResponseActionParams
func ProcessesParamsAsEndpointResponseActionParams(v *ProcessesParams) EndpointResponseActionParams {
	return EndpointResponseActionParams{
		ProcessesParams: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *EndpointResponseActionParams) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DefaultParams
	err = newStrictDecoder(data).Decode(&dst.DefaultParams)
	if err == nil {
		jsonDefaultParams, _ := json.Marshal(dst.DefaultParams)
		if string(jsonDefaultParams) == "{}" { // empty struct
			dst.DefaultParams = nil
		} else {
			match++
		}
	} else {
		dst.DefaultParams = nil
	}

	// try to unmarshal data into ProcessesParams
	err = newStrictDecoder(data).Decode(&dst.ProcessesParams)
	if err == nil {
		jsonProcessesParams, _ := json.Marshal(dst.ProcessesParams)
		if string(jsonProcessesParams) == "{}" { // empty struct
			dst.ProcessesParams = nil
		} else {
			match++
		}
	} else {
		dst.ProcessesParams = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DefaultParams = nil
		dst.ProcessesParams = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EndpointResponseActionParams)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EndpointResponseActionParams)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EndpointResponseActionParams) MarshalJSON() ([]byte, error) {
	if src.DefaultParams != nil {
		return json.Marshal(&src.DefaultParams)
	}

	if src.ProcessesParams != nil {
		return json.Marshal(&src.ProcessesParams)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EndpointResponseActionParams) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DefaultParams != nil {
		return obj.DefaultParams
	}

	if obj.ProcessesParams != nil {
		return obj.ProcessesParams
	}

	// all schemas are nil
	return nil
}

type NullableEndpointResponseActionParams struct {
	value *EndpointResponseActionParams
	isSet bool
}

func (v NullableEndpointResponseActionParams) Get() *EndpointResponseActionParams {
	return v.value
}

func (v *NullableEndpointResponseActionParams) Set(val *EndpointResponseActionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointResponseActionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointResponseActionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointResponseActionParams(val *EndpointResponseActionParams) *NullableEndpointResponseActionParams {
	return &NullableEndpointResponseActionParams{value: val, isSet: true}
}

func (v NullableEndpointResponseActionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointResponseActionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
